{"version":3,"file":"erebus-components.min.js","sources":["../node_modules/erebus-core/src/utils.mjs","../node_modules/erebus-core/src/cookies.mjs","../node_modules/erebus-core/src/random.mjs","../node_modules/erebus-core/src/events.mjs","../node_modules/erebus-core/src/handler.mjs","../node_modules/erebus-core/src/http.mjs","../node_modules/erebus-core/src/element.mjs","../node_modules/erebus-core/src/i18n.mjs","../node_modules/erebus-core/src/formats.mjs","../node_modules/erebus-core/src/router.mjs","../node_modules/erebus-core/src/validator.mjs","../node_modules/erebus-core/src/form.mjs","../node_modules/erebus-core/src/index.mjs","../src/components/protect.mjs","../src/components/dialog.mjs","../src/components/toast.mjs","../src/erebus-components.mjs","../resources/en.mjs"],"sourcesContent":["const $module = {};\r\n\r\n/**\r\n * Allows to determine if a specific instance is a promise object (or a promise-like object)\r\n * @param {*} value Object to evaluate\r\n * @returns Boolean value to determine if the object is a promise or not\r\n */\r\n$module.isPromise = function(value) {\r\n\tif (!value) {\r\n\t\treturn false;\r\n\t}\r\n\treturn (value instanceof Promise) || (typeof (value.then === 'function') && typeof (value.catch) === 'function');\r\n};\r\n\r\n/** Trims a string by removing leading and trailing white spaces  */\r\n$module.trim = function (value) {\r\n\tif (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\treturn value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n};\r\n\r\nexport default $module;","import utils from './utils.mjs';\r\n\r\nconst $module = {};\r\n\r\n/**\r\n * Sets a specific cookie\r\n * @param name Name of the cookie to set\r\n * @param value Value to set\r\n * @param timespan Timspan to maintain the cookie in seconds\r\n */\r\n$module.set = function (name, value, timespan) {\r\n\tif (!name) {\r\n\t\tthrow Error('erebus.cookies.set.null_cookie_name');\r\n\t}\r\n\tif (typeof (timespan) !== 'number') {\r\n\t\ttimespan = 3600;\r\n\t}\r\n\tconst expireDate = new Date();\r\n\texpireDate.setTime(expireDate.getTime() + (timespan * 1000));\r\n\tvar cookie = utils.trim(name) + '=' + value + '; expires=' + expireDate.toGMTString() + '; path=/';\r\n\tdocument.cookie = cookie;\r\n};\r\n\r\n/**\r\n * Obtains the value from a cookie\r\n * @param name Name of the cookie to obtain\r\n * @returns Cookie value or null if it is not defined\r\n */\r\n$module.get = function (name) {\r\n\tif (!name) {\r\n\t\treturn null;\r\n\t}\r\n\tvar cookiestring = RegExp(name + '=[^;]+').exec(document.cookie);\r\n\tif (cookiestring) {\r\n\t\treturn decodeURIComponent(cookiestring.toString().replace(/^[^=]+./, ''));\r\n\t}\r\n\treturn '';\r\n};\r\n\r\nexport default $module;","/** Creates a random tiny identified composed by 4 alphanumeric characters */\r\nfunction tinyId() {\r\n\treturn (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n}\r\n\r\n/** Creates a random short identified composed by 8 alphanumeric characters */\r\nfunction shortId() {\r\n\treturn tinyId() + tinyId();\r\n}\r\n\r\n/** Creates a random values simulating a global global unique identifier */\r\nfunction guid() {\r\n\treturn tinyId()\r\n\t\t+ '-' + tinyId()\r\n\t\t+ '-' + tinyId()\r\n\t\t+ '-' + tinyId()\r\n\t\t+ tinyId();\r\n}\r\n\r\nexport default { tinyId, shortId, guid };","const $module = {};\r\n\r\n/**\r\n * Returns a promise fullfilled when the document has been loaded and parsed.\r\n * @returns Promise to be fulfilled once the document is ready\r\n */\r\n$module.documentReady = function() {\r\n\tif (document.readyState !== 'loading') {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\tif (typeof (document.addEventListener) === 'function') {\r\n\t\treturn new Promise(function(resolve) {\r\n\t\t\tdocument.addEventListener('DOMContentLoaded', resolve, false);\r\n\t\t});\r\n\t}\r\n\tif (typeof (document.attachEvent) === 'function') {\r\n\t\treturn new Promise(function(resolve) {\r\n\t\t\tdocument.attachEvent('onreadystatechange', function () {\r\n\t\t\t\tif (document.readyState === 'complete') {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tconsole.error('The current browser event management is not supported by the Erebus framework');\r\n\treturn Promise.reject('erebus.events.unsuported_browser');\r\n};\r\n\r\n/**\r\n * Internal method to assign an animation class to an element and invoke a callback when is completed\r\n * @param target Reference to the HTMLElement (or ErebusElement) to animate\r\n * @param animationClass String with the CSS animation name to apply\r\n */\r\n$module.animate = function(target, animationClass) {\r\n\tif (!target) {\r\n\t\treturn Promise.reject('erebus.events.wait_animation.invalid_target');\r\n\t} else if (!animationClass) {\r\n\t\treturn Promise.reject('erebus.events.wait_animation.invalid_animation');\r\n\t}\r\n\treturn new Promise(function(resolve) {\r\n\t\t// registers the event handler\r\n\t\ttarget.addEventListener('animationend', function () {\r\n\t\t\tresolve();\r\n\t\t}, { capture: false, once: true });\r\n\r\n\t\t// implements the animation\r\n\t\tif (target.className === '') {\r\n\t\t\ttarget.className = animationClass;\r\n\t\t} else if (target.classList) {\r\n\t\t\ttarget.classList.add(animationClass);\r\n\t\t} else if (typeof (target.addClass) === 'function') {\r\n\t\t\ttarget.addClass(animationClass);\r\n\t\t} else {\r\n\t\t\ttarget.className += ' ' + animationClass;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default $module;","const $module = {};\r\n\r\n/** Invokes a function with exception management */\r\n$module.trigger = function(fnc, ...params) {\r\n\tif (fnc === null || fnc === undefined) {\r\n\t\treturn;\r\n\t} else if (typeof(fnc) !== 'function') {\r\n\t\tthrow new Error('erebus.handler.trigger.invalid_function');\r\n\t}\r\n\ttry {\r\n\t\treturn fnc.call(null, ...params);\r\n\t} catch (ex) {\r\n\t\tthrow new Error('erebus.handlers.trigger.function_error', ex);\r\n\t}\r\n};\r\n\r\n/** Invokes a function with exception management */\r\n$module.triggerAsPromise = function(fnc, ...params) {\r\n\tif (fnc === null || fnc === undefined) {\r\n\t\treturn Promise.resolve();\r\n\t} else if (typeof(fnc) !== 'function') {\r\n\t\treturn Promise.reject('erebus.handler.trigger_promise_function.invalid_function');\r\n\t}\r\n\treturn new Promise(function(resolve, reject) {\r\n\t\ttry {\r\n\t\t\tconst result = fnc.call(null, ...params);\r\n\t\t\tresolve(result);\r\n\t\t} catch (ex) {\r\n\t\t\tconsole.error('erebus.handlers.trigger_promise_function.function_error', ex);\r\n\t\t\treject(ex);\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default $module;","import utils from './utils.mjs';\r\n\r\nconst $module = {};\r\n/** Internal scoped variable holders */\r\nconst $scope = {};\r\n/** Holds all the estandard parsers defined for the library */\r\n$scope.parsers = {};\r\n\r\n/** Creates the underlying XMLHTTP object used to execute ajax calls */\r\nfunction createXmlHttp() {\r\n\tif (window.XMLHttpRequest) {\r\n\t\treturn new window.XMLHttpRequest();\r\n\t}\r\n\ttry {\r\n\t\treturn new ActiveXObject('Msxml2.XMLHTTP');\r\n\t} catch (ex) {\r\n\t\ttry {\r\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\r\n\t\t} catch (ex) {\r\n\t\t\tthrow Error('erebus.http.xmlhttp_error');\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Internal method to extract the response headers associated with a particular XMLHTTP request\r\n * @param request Instance of the XMLHTTP that initiated the request\r\n * @returns Object with all the headers as attributes\r\n */\r\nfunction getResponseHeaders(request) {\r\n\tconst headers = {};\r\n\tlet rawHeaders = request.getAllResponseHeaders();\r\n\tif (rawHeaders) {\r\n\t\trawHeaders = rawHeaders.split('\\r\\n');\r\n\t\tfor (let idx = 0; idx < rawHeaders.length; idx++) {\r\n\t\t\tif (!rawHeaders[idx]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst parts = rawHeaders[idx].split(':');\r\n\t\t\t// NOTE: on older browsers the header name can have mixed case, on recent browsers it is only lowercase\r\n\t\t\tconst headerName = utils.trim(parts[0]).toLowerCase();\r\n\t\t\tconst headerValue = utils.trim(parts[1]);\r\n\t\t\tif (headerName && headerValue) {\r\n\t\t\t\theaders[headerName] = headerValue;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn headers;\r\n}\r\n\r\n/**\r\n * Internal utility method to set request headers\r\n * @param {*} request XHR object representing the request\r\n * @param {*} headers Object with the headers to set. Each header is an attribute in the object\r\n */\r\nfunction setRequestHeaders(request, headers) {\r\n\tif (headers) {\r\n\t\tfor (var headerName in headers) {\r\n\t\t\trequest.setRequestHeader(headerName, headers[headerName]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Parses a response as a JSON */\r\n$scope.parsers['json'] = function (response) {\r\n\ttry {\r\n\t\treturn JSON.parse(response);\r\n\t} catch (ex) {\r\n\t\tconst err = new Error('erebus.http.json_parse_error');\r\n\t\terr.cause = ex;\r\n\t\terr.response = response;\r\n\t\tthrow err;\r\n\t}\r\n};\r\n\r\n/** Internal method to obtain the proper parser according to the content type or null if no transformations are required */\r\nfunction getResponseParser(headers) {\r\n\tif (headers && headers['content-type'] === 'application/json') {\r\n\t\treturn $scope.parsers['json'];\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n/**\r\n *\r\n * @param url String with the resource URL to be requested\r\n * @param options Object with the options to execute the request. The values are:\r\n * \t\t\t\t\t- method: String with the HTTP method to execute: GET, POST, PUT, DELETE. If this is not provided, GET will be used by default.\r\n * \t\t\t\t\t- async: Boolean value to determine if the request should be asynchronous (true) or not. By default it is true.\r\n *                  - data: Data to be included in a POST, PUT or DELETE request\r\n * @returns Promise to be fulfilled according to the HTTP request result\r\n */\r\nfunction executeRequest(method, url, options) {\r\n\tif (typeof (url) !== 'string' || !url) {\r\n\t\treturn Promise.reject('erebus.http.null_url');\r\n\t}\r\n\tif (!options) {\r\n\t\toptions = {};\r\n\t}\r\n\tif (!method) {\r\n\t\tmethod = 'GET';\r\n\t}\r\n\treturn new Promise(function (resolve, reject) {\r\n\t\tconst request = createXmlHttp();\r\n\t\trequest.onreadystatechange = function () {\r\n\t\t\tif (request.readyState == 4 || request.readyState === 'complete') {\r\n\t\t\t\tif (request.status !== 200) {\r\n\t\t\t\t\tconst err = new Error('http_error[' + request.status + ']');\r\n\t\t\t\t\terr.status = request.status;\r\n\t\t\t\t\terr.response = request.responseText;\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar response = request.responseText;\r\n\t\t\t\t\tconst headers = getResponseHeaders(request);\r\n\t\t\t\t\tconst parser = getResponseParser(headers);\r\n\t\t\t\t\tif (parser) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tresponse = parser(response);\r\n\t\t\t\t\t\t} catch (ex) {\r\n\t\t\t\t\t\t\treject(ex);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (typeof (options.interceptor) === 'function') {\r\n\t\t\t\t\t\tconst result = options.interceptor(response, headers);\r\n\t\t\t\t\t\tif (result !== undefined) {\r\n\t\t\t\t\t\t\tresponse = result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresolve(response);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequest.open(method, url, options.async !== false);\r\n\t\tsetRequestHeaders(request, options.headers);\r\n\t\tif (method === 'GET' || !options.data) {\r\n\t\t\trequest.send();\r\n\t\t} else {\r\n\t\t\trequest.send(options.data);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Executes a HTTP GET request\r\n * @param {string} url String with the resource URL to request\r\n * @param {object} options Object with the options to execute the request.  The attributes are:\r\n * \t\t\t- headers: Object with the headers to pass\r\n * \t\t\t- interceptor: Optional function to capture and process the response received.  The function will receive\r\n * \t\t\t\t\ttwo parameters: the response content and the response headers\r\n * \t\t\t- async: Optional boolean value to determine if the call should be asynchronous or not. By default all\r\n * \t\t\t\t\trequests are asynchronous\r\n * @returns Promise to be fullfilled or rejecting according to the executed request\r\n */\r\n$module.get = function (url, options) {\r\n\treturn executeRequest('GET', url, options);\r\n};\r\n\r\n/**\r\n * Executes a HTTP POST request\r\n * @param {string} url String with the resource URL to request\r\n * @param {object} options Object with the options to execute the request.  The attributes are:\r\n * \t\t\t- headers: Object with the headers to pass\r\n * \t\t\t- interceptor: Optional function to capture and process the response received.  The function will receive\r\n * \t\t\t\t\ttwo parameters: the response content and the response headers\r\n * \t\t\t- async: Optional boolean value to determine if the call should be asynchronous or not. By default all\r\n * \t\t\t\t\trequests are asynchronous\r\n * \t\t\t- data: Data to include in the post request\r\n * @returns Promise to be fullfilled or rejecting according to the executed request\r\n */\r\n$module.post = function (url, options) {\r\n\treturn executeRequest('POST', url, options);\r\n};\r\n\r\n/**\r\n * Executes a HTTP PUT request\r\n * @param {string} url String with the resource URL to request\r\n * @param {object} options Object with the options to execute the request.  The attributes are:\r\n * \t\t\t- headers: Object with the headers to pass\r\n * \t\t\t- interceptor: Optional function to capture and process the response received.  The function will receive\r\n * \t\t\t\t\ttwo parameters: the response content and the response headers\r\n * \t\t\t- async: Optional boolean value to determine if the call should be asynchronous or not. By default all\r\n * \t\t\t\t\trequests are asynchronous\r\n * \t\t\t- data: Data to include in the post request\r\n * @returns Promise to be fullfilled or rejecting according to the executed request\r\n */\r\n$module.put = function (url, options) {\r\n\treturn executeRequest('PUT', url, options);\r\n};\r\n\r\n/**\r\n * Executes a HTTP DELETE request\r\n * @param {string} url String with the resource URL to request\r\n * @param {object} options Object with the options to execute the request.  The attributes are:\r\n * \t\t\t- headers: Object with the headers to pass\r\n * \t\t\t- interceptor: Optional function to capture and process the response received.  The function will receive\r\n * \t\t\t\t\ttwo parameters: the response content and the response headers\r\n * \t\t\t- async: Optional boolean value to determine if the call should be asynchronous or not. By default all\r\n * \t\t\t\t\trequests are asynchronous\r\n * \t\t\t- data: Data to include in the post request\r\n * @returns Promise to be fullfilled or rejecting according to the executed request\r\n */\r\n$module.delete = function (url, options) {\r\n\treturn executeRequest('DELETE', url, options);\r\n};\r\n\r\n/**\r\n * Loads a JavaScript resource dynamically\r\n * @param url URL to load the script from it\r\n * @returns Promise that allows to handle the script loading actions\r\n */\r\n$module.loadScript = function (url) {\r\n\treturn new Promise((resolve) => {\r\n\t\tvar element = document.createElement('script');\r\n\t\telement.src = url;\r\n\t\telement.type = 'text/javascript';\r\n\t\telement.async = false;\r\n\t\telement.onerror = () => {\r\n\t\t\t/*\r\n\t\t\treject(errorHandler.create({\r\n\t\t\t\tmodule: $moduleName,\r\n\t\t\t\tcode: `erebus.http.load_script_error[${url}]`\r\n\t\t\t})); // TODO: collect error info\r\n\t\t\t*/\r\n\t\t};\r\n\t\telement.onload = () => {\r\n\t\t\tresolve();\r\n\t\t};\r\n\t\tdocument.head.appendChild(element);\r\n\t});\r\n};\r\n\r\nexport default $module;","import utils from './utils.mjs';\r\nimport http from './http.mjs';\r\nimport random from './random.mjs';\r\n\r\nconst $scope = {};\r\n// Will hold the reference to the parser instance (if available) or false if it is not available\r\n$scope.domParser = null;\r\n\r\n/**\r\n * Utility method to create a HTMLElement from an XMLElement\r\n * @param {*} xmlElement XMLElement to create the XMLFrom it\r\n * @returns HTMLElement created from the XMLElement\r\n */\r\nfunction xmlToHtml(xmlElement) {\r\n\tvar htmlElement = document.createElement(xmlElement.tagName);\r\n\t// Recreates the attributes\r\n\tfor (let ndx=0; ndx < xmlElement.attributes.length; ndx++) {\r\n\t\tconst xmlAttribute = xmlElement.attributes[ndx];\r\n\t\thtmlElement.setAttribute(xmlAttribute.name, xmlAttribute.value);\r\n\t}\r\n\t// Recreates the child elements\r\n\tfor (let ndx=0; ndx < xmlElement.childNodes.length; ndx++) {\r\n\t\tconst childXml = xmlElement.childNodes[ndx];\r\n\t\tif (childXml.nodeType === 3) {\r\n\t\t\tconst childText = document.createTextNode(childXml.textContent);\r\n\t\t\thtmlElement.appendChild(childText);\r\n\t\t\tcontinue;\r\n\t\t} else if (childXml.nodeType !== 1) {\r\n\t\t\tconsole.warn(`erebus.element.xml_to_html.invalid_node_type[${childXml.nodeType}]`);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tconst childHtml = xmlToHtml(childXml);\r\n\t\thtmlElement.appendChild(childHtml);\r\n\t}\r\n\treturn htmlElement;\r\n}\r\n\r\n/**\r\n * Parses a string HTML content and returns its content or null if it is not HTML content\r\n * @param {string} content HTML content to parse\r\n * @returns DOM elements representing the content\r\n */\r\nfunction parseHTML(content) {\r\n\tif (!content || typeof (content) !== 'string') {\r\n\t\treturn [];\r\n\t}\r\n\tif ($scope.domParser === null) {\r\n\t\tif (typeof(DOMParser) === 'undefined') {\r\n\t\t\t$scope.domParser = false;\r\n\t\t} else {\r\n\t\t\t$scope.domParser = new DOMParser();\r\n\t\t}\r\n\t}\r\n\tif ($scope.domParser === false) {\r\n\t\tconst holder = document.createElement('div');\r\n\t\tholder.innerHTML = content;\r\n\t\treturn [...holder.childNodes];\r\n\t}\r\n\t// NOTE: We use the XML parser, because the HTML parser does not parse certain tags\r\n\t// For example: trying to parse a TR or a TD does not work\r\n\t// Parsing atomic HTMLElements is crucial for the good work of the element since allows to create atomic portions of content\r\n\tconst results = [];\r\n\tconst holder = $scope.domParser.parseFromString(content, 'text/xml');\r\n\tfor (let ndx=0; ndx < holder.childNodes.length; ndx++) {\r\n\t\tconst element = xmlToHtml(holder.childNodes[ndx]);\r\n\t\tresults.push(element);\r\n\t}\r\n\treturn results;\r\n}\r\n\r\n/**\r\n * Removes all the child nodes from a specific element\r\n * @param {HTMLElement} Element to remove the childs from it\r\n */\r\nfunction removeAllChild(element) {\r\n\tif (!element || !(element instanceof HTMLElement)) {\r\n\t\treturn;\r\n\t}\r\n\twhile (element.firstChild) {\r\n\t\telement.removeChild(element.firstChild);\r\n\t}\r\n}\r\n\r\n/**\r\n * Executes a deep copy of an HTMLElement\r\n * @param {HTMLElement} sourceElement Element to copy\r\n * @returns Copy of the element\r\n */\r\nfunction cloneHTMLElement(sourceElement) {\r\n\tif (!sourceElement || !(sourceElement instanceof HTMLElement)) {\r\n\t\treturn null;\r\n\t}\r\n\tconst clonedElement = sourceElement.cloneNode(true);\r\n\tif (clonedElement.nodeType === 1) {\r\n\t\tclonedElement.removeAttribute('id'); // the element identifier should not be cloned\r\n\t}\r\n\treturn clonedElement;\r\n}\r\n\r\n/**\r\n * Creates a block containing error information that can be correlated in the console\r\n * @param {*} errorCode Code to show in the console to describe the error\r\n * @param {*} errorInstance Root cause (usually an Error object captured as an exception)\r\n * @returns HTMLElement containing the error message to be shown in the UI\r\n */\r\nfunction createErrorContent(errorCode, errorInstance) {\r\n\tconst errorId = random.shortId();\r\n\tif (errorInstance) {\r\n\t\tconsole.error(`${errorCode}[${errorId}]`, errorInstance);\r\n\t} else {\r\n\t\tconsole.error(`${errorCode}[${errorId}]`);\r\n\t}\r\n\tconst errorElement = document.createElement('div');\r\n\terrorElement.innerHTML = `Error[${errorId}]`;\r\n\treturn errorElement;\r\n}\r\n\r\n/**\r\n * Internal method to create an ErebusElement based on the data provided\r\n * @param {*} source String with the selector, string with HTML code (to create a wrapper for it), reference to an HTMLElement\r\n * @returns\r\n */\r\nfunction createErebusElement(source) {\r\n\tif (!source) {\r\n\t\treturn null;\r\n\t} else if (source instanceof ErebusElement) {\r\n\t\treturn source;\r\n\t} else if (source === 'body' || source === document.body) {\r\n\t\tif (!$scope.body) {\r\n\t\t\t$scope.body = new ErebusElement(document.body);\r\n\t\t}\r\n\t\treturn $scope.body;\r\n\t} else if (source instanceof HTMLElement) {\r\n\t\treturn new ErebusElement(source);\r\n\t} else if (typeof (source) === 'string') {\r\n\t\tvar nativeSource;\r\n\t\tif (source.startsWith('<') && source.endsWith('>')) {\r\n\t\t\tnativeSource = parseHTML(source);\r\n\t\t\tif (nativeSource.length == 0) {\r\n\t\t\t\tnativeSource = createErrorContent('erebus.element.invalid_html.empty_content');\r\n\t\t\t} else if (nativeSource.length > 1) {\r\n\t\t\t\tnativeSource = createErrorContent('erebus.element.invalid_html.multiple_nodes');\r\n\t\t\t} else {\r\n\t\t\t\tnativeSource = nativeSource[0];\r\n\t\t\t}\r\n\t\t} else if (source.startsWith('#')) {\r\n\t\t\tnativeSource = document.getElementById(source.substring(1));\r\n\t\t\tif (!nativeSource) {\r\n\t\t\t\tthrow new Error(`erebus.element.unknown_element_id[${source}]`);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnativeSource = document.querySelector(source);\r\n\t\t\tif (!nativeSource) {\r\n\t\t\t\tthrow new Error(`erebus.element.unknown_selector[${source}]`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new ErebusElement(nativeSource);\r\n\t}\r\n}\r\n\r\n/** Wrapper to allow common methods to handle HTML content */\r\nclass ErebusElement {\r\n\t#wrappedElement;\r\n\t// Allows to determine if the element is visible or not\r\n\t#hidden;\r\n\r\n\tconstructor(element) {\r\n\t\tthis.#hidden = false;\r\n\t\tif (element instanceof HTMLElement) {\r\n\t\t\tthis.#wrappedElement = element;\r\n\t\t} else {\r\n\t\t\tthrow new Error('erebus.element.invalid_element[' + typeof (element) + ']');\r\n\t\t}\r\n\t}\r\n\r\n\t/** Allows to obtain the reference to the wrapped element */\r\n\tget element() {\r\n\t\treturn this.#wrappedElement;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the innerHTML on the wrapped element.\r\n\t * This is a compatibility method to maintain consistency and interchangeability with HTMLElement.\r\n\t * @param {string} value String with the HTML content to set\r\n\t */\r\n\tset innerHTML(value) {\r\n\t\tthis.#wrappedElement.innerHTML = value;\r\n\t}\r\n\r\n\t/** Removes all the content from the current instance */\r\n\tclear() {\r\n\t\tthis.#wrappedElement.innerHTML = '';\r\n\t\tremoveAllChild(this.#wrappedElement);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the content inside the wrapped element.  This method is preferred over innerHTML\r\n\t * since it cleans the event listener associated with the child nodes.\r\n\t * @param {any} value String with the content to add (text or HTML), a reference to a HTMLElement to set as the content\r\n\t * \t\t\tor a reference to another ErebusElement.\r\n\t * @returns The current wrapper instance\r\n\t */\r\n\tcontent(value) {\r\n\t\tthis.clear();\r\n\t\tif (typeof (value) === 'string') {\r\n\t\t\tthis.#wrappedElement.innerHTML = value;\r\n\t\t\t// If javascript content was added as part of the content, then processes it as a script tag\r\n\t\t\tconst innerScripts = this.#wrappedElement.querySelectorAll('script');\r\n\t\t\tfor (var ndx=0; ndx < innerScripts.length; ndx++) {\r\n\t\t\t\tconst scriptObj = innerScripts[ndx];\r\n\t\t\t\tscriptObj.parentNode.removeChild(scriptObj);\r\n\t\t\t\tvar newScript = document.createElement('script');\r\n\t\t\t\tnewScript.textContent = scriptObj.textContent;\r\n\t\t\t\tthis.#wrappedElement.appendChild(newScript);\r\n\t\t\t}\r\n\t\t} else if (value instanceof HTMLElement) {\r\n\t\t\tthis.#wrappedElement.appendChild(value);\r\n\t\t} else if (value instanceof ErebusElement) {\r\n\t\t\tthis.clear();\r\n\t\t\tvalue.setParentNode(this.#wrappedElement);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Append the current instance to a specific parent\r\n\t * @param {*} parent String with the parent selector, reference to the HTMLElement to use as a parent or\r\n\t * \t\t\treference to an ErebusElement or null to detach the wrapped elements\r\n\t * @returns The current wrapper instance\r\n\t */\r\n\tsetParentNode(parent) {\r\n\t\tif (!parent) {\r\n\t\t\tif (this.#wrappedElement.parentNode) {\r\n\t\t\t\tthis.#wrappedElement.parentNode.removeChild(this.#wrappedElement);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t} else if (typeof (parent) === 'string') {\r\n\t\t\tparent = createErebusElement(parent);\r\n\t\t} else if (typeof (parent.appendChild) !== 'function') {\r\n\t\t\tthrow new Error('erebus.wrapper.append_to.invalid_parent[' + typeof (parent) + ']');\r\n\t\t}\r\n\t\tparent.appendChild(this.#wrappedElement);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Alias to the setParent node method that allows to enable compatibility with DOM elements */\r\n\tset parentNode(parent) {\r\n\t\tthis.setParentNode(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Append a child element to the wrapped element\r\n\t * @param {*} value String with the HTML element to add or reference to the HTML element to add or\r\n\t * \t\t\treference to the ErebusElement to add.\r\n\t */\r\n\tappendChild(value) {\r\n\t\tif (typeof (value) === 'string') {\r\n\t\t\tconst parsedContent = parseHTML(value);\r\n\t\t\tfor (let idx = 0; idx < parsedContent.length; idx++) {\r\n\t\t\t\tconst content = parsedContent[idx];\r\n\t\t\t\tthis.#wrappedElement.appendChild(content);\r\n\t\t\t}\r\n\t\t} else if (value instanceof HTMLElement) {\r\n\t\t\tthis.#wrappedElement.appendChild(value);\r\n\t\t} else if (value instanceof ErebusElement) {\r\n\t\t\tthis.#wrappedElement.appendChild(value.element);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a listener to the current instance and its wrapped elements\r\n\t * @param {string} eventName Name of the event. For example click.\r\n\t * @param {function} listener Function to invoke when the event is triggered\r\n\t * @param {object} options Optional object with the options to set the listener (see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\r\n\t * @returns Current element instance to write fluid expressions\r\n\t */\r\n\taddEventListener(eventName, listener, options) {\r\n\t\tif (!eventName) {\r\n\t\t\tthrow new Error('erebus.element.add_listener.null_event_name');\r\n\t\t} else if (typeof (listener) === 'function') {\r\n\t\t\tif (options === undefined) {\r\n\t\t\t\toptions = { capture: false };\r\n\t\t\t}\r\n\t\t\tthis.#wrappedElement.addEventListener(eventName, listener, options);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a single execution listener to the current instance and its wrapped elements\r\n\t * @param {string} eventName Name of the event. For example click.\r\n\t * @param {function} listener Function to invoke when the event is triggered\r\n\t * @returns Current element instance to write fluid expressions\r\n\t */\r\n\tonce(eventName, listener) {\r\n\t\treturn this.addEventListener(eventName, listener, { capture: false, once: true });\r\n\t}\r\n\r\n\t/** Allows to determine if the element is hidden or not */\r\n\tget isHidden() {\r\n\t\treturn this.#hidden;\r\n\t}\r\n\r\n\t/** Hides the wrapped elements to make it invisible */\r\n\thide() {\r\n\t\tif (this.#hidden) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.#hidden = true;\r\n\t\tconst computedDisplay = getComputedStyle(this.#wrappedElement).getPropertyValue('display');\r\n\t\tif (computedDisplay && computedDisplay !== 'none') {\r\n\t\t\tthis.#wrappedElement.originalDisplay = computedDisplay;\r\n\t\t}\r\n\t\tthis.#wrappedElement.style.display = 'none';\r\n\t}\r\n\r\n\t/** Shows the wrapped elements to make it visible */\r\n\tshow() {\r\n\t\tthis.#hidden = false;\r\n\t\tconst computedDisplay = getComputedStyle(this.#wrappedElement).getPropertyValue('display');\r\n\t\tif (!computedDisplay || computedDisplay === 'none') {\r\n\t\t\tif (this.#wrappedElement.originalDisplay) {\r\n\t\t\t\tthis.#wrappedElement.style.display = this.#wrappedElement.originalDisplay;\r\n\t\t\t\tdelete this.#wrappedElement.originalDisplay;\r\n\t\t\t} else {\r\n\t\t\t\tthis.#wrappedElement.style.display = 'block';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** Clone the current instance */\r\n\tclone() {\r\n\t\tconst clonedWrapped = cloneHTMLElement(this.#wrappedElement);\r\n\t\treturn new ErebusElement(clonedWrapped);\r\n\t}\r\n\r\n\t/** Adds a new CSS class to the HTMLElements wrapped by the current instance */\r\n\taddClass(...classes) {\r\n\t\tif (!classes || classes.length === 0) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tfor (let cdx = 0; cdx < classes.length; cdx++) {\r\n\t\t\tconst className = utils.trim(classes[cdx]);\r\n\t\t\tif (!className || typeof (className) !== 'string') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (!this.#wrappedElement.className) {\r\n\t\t\t\tthis.#wrappedElement.className = className;\r\n\t\t\t} else if (this.#wrappedElement.classList) {\r\n\t\t\t\tthis.#wrappedElement.classList.add(className);\r\n\t\t\t} else {\r\n\t\t\t\tconst regex = new RegExp('(^|\\\\s)(' + className + ')($|\\\\s)', 'g');\r\n\t\t\t\tif (!regex.test(this.#wrappedElement.className)) {\r\n\t\t\t\t\tthis.#wrappedElement.className += ' ' + className;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Adds a new CSS class to the HTMLElements wrapped by the current instance */\r\n\tremoveClass(...classes) {\r\n\t\tif (!classes || classes.length === 0) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif (!this.#wrappedElement.className) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (let cdx = 0; cdx < classes.length; cdx++) {\r\n\t\t\tconst className = utils.trim(classes[cdx]);\r\n\t\t\tif (!className || typeof (className) !== 'string') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (this.#wrappedElement.classList) {\r\n\t\t\t\tthis.#wrappedElement.classList.remove(className);\r\n\t\t\t} else {\r\n\t\t\t\tconst regex = new RegExp('(^|\\\\s)(' + className + ')($|\\\\s)', 'g');\r\n\t\t\t\tif (regex.test(this.#wrappedElement.className)) {\r\n\t\t\t\t\tthis.#wrappedElement.className = this.#wrappedElement.className.replace(regex, '');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the CSS class name for the HTMLElements wrapped by the current instance\r\n\t * @param {string} value Name of the CSS class to add\r\n\t */\r\n\tset className(value) {\r\n\t\tvalue = utils.trim(value);\r\n\t\tthis.#wrappedElement.className = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the content from an external resource inside the element represented by the current instance\r\n\t * @param {string} url String of the source URL used to load content into the current instance\r\n\t */\r\n\tasync load(url) {\r\n\t\ttry {\r\n\t\t\tconst response = await http.get(url);\r\n\t\t\tthis.content(response);\r\n\t\t} catch (err) {\r\n\t\t\tvar errorBlock = createErrorContent('erebus.element.load_error', err);\r\n\t\t\tthis.content(errorBlock);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default createErebusElement;","import handler from './handler.mjs';\r\nimport utils from './utils.mjs';\r\n\r\nconst $module = {};\r\nconst $scope = {};\r\n// Holds the language defined for the application\r\n$scope.language = null;\r\n// Holds all the resources defined\r\n$scope.resources = {};\r\n// Holds the symbol used by the system to group the thousands\r\n$scope.systemThousandSymbol = null;\r\n// Holds the symbol used by the application to group the thousands\r\n$scope.appThousandSymbol = null;\r\n// Holds the symbol used by the system to separate the decimal part of a number\r\n$scope.systemDecimalSymbol = null;\r\n// Holds the symbol used by the application to separate the decimal part of a number\r\n$scope.appDecimalSymbol = null;\r\n// Holds the date format defined for the locale\r\n$scope.dateFormat = null;\r\n// Holds the date+time format defined for the locale\r\n$scope.dateTimeFormat = null;\r\n\r\n/** Allows to obtain the locale code in the client */\r\n$module.getLocale = function() {\r\n\tif (navigator.language) {\r\n\t\treturn navigator.language;\r\n\t} else if (navigator.browserLanguage) {\r\n\t\treturn navigator.browserLanguage;\r\n\t}\r\n\treturn 'en-US';\r\n};\r\n\r\n/** Obtains the default language defined for the current system */\r\n$module.getSystemLanguage = function() {\r\n\treturn $module.getLocale().substr(0, 2);\r\n};\r\n\r\n/**\r\n * Allows to set the language used by the application\r\n * @param {string} value Two letter ISO language code\r\n */\r\n$module.setLanguage = function(value) {\r\n\t$scope.language = value;\r\n};\r\n\r\n/** Obtains the language defined for the application */\r\n$module.getLanguage = function() {\r\n\tif (!$scope.language) {\r\n\t\treturn $module.getSystemLanguage();\r\n\t}\r\n\treturn $scope.language;\r\n};\r\n\r\n/**\r\n * Sets the resource bundle for a specific language\r\n * @param {*} resource Object with the labels and values, function providing the object with the label and values\r\n * \t\t\t\tor promise to be fulfilled with the label and values\r\n * @param {*} langCode String with the language code or omit to use the system default language\r\n */\r\n$module.setResourceBundle = function(resource, langCode) {\r\n\tif (!resource) {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\tif (!langCode) {\r\n\t\tlangCode = $module.getLanguage();\r\n\t}\r\n\tif (typeof (resource) === 'function') {\r\n\t\tconst result = handler.trigger(resource);\r\n\t\treturn $module.setResourceBundle(result, langCode);\r\n\t} else if (utils.isPromise(resource)) {\r\n\t\treturn resource.then(function (result) {\r\n\t\t\treturn $module.setResourceBundle(result, langCode);\r\n\t\t}).catch(function (ex) {\r\n\t\t\tconst err = Error('erebus.i18n.promise_resource_error');\r\n\t\t\terr.cause = ex;\r\n\t\t\tthrow err;\r\n\t\t});\r\n\t}\r\n\tconst target = $scope.resources[langCode];\r\n\tif (!target) {\r\n\t\t$scope.resources[langCode] = resource;\r\n\t} else {\r\n\t\tObject.assign(target, resource);\r\n\t}\r\n\treturn Promise.resolve();\r\n};\r\n\r\n/**\r\n * Obtains an i18n label for the language defined in the syste,\r\n * @param {*} key Key to obtain the value for it\r\n * @param {*} defaultValue Default value in case that no language resource has been set\r\n */\r\n$module.getLabel = function(key, defaultValue) {\r\n\tconst langCode = $module.getLanguage();\r\n\tconst resources = $scope.resources[langCode];\r\n\tif (!resources || !resources[key]) {\r\n\t\treturn defaultValue ?? key;\r\n\t}\r\n\treturn resources[key];\r\n};\r\n\r\n/** Allows to get the thousands grouping separator used by the system */\r\n$module.getSystemThousandsSeparator = function () {\r\n\tif ($scope.systemThousandSymbol === null) {\r\n\t\tconst numericFormatter = new Intl.NumberFormat($module.getLanguage(), { useGrouping: true, minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n\t\tvar value = numericFormatter.format('123456.1');\r\n\t\t$scope.systemThousandSymbol = value.substring(3, 4);\r\n\t}\r\n\treturn $scope.systemThousandSymbol;\r\n};\r\n\r\n/** Allows to get the thousands grouping separator used by the application */\r\n$module.getThousandsSeparator = function () {\r\n\tif ($scope.appThousandSymbol === null) {\r\n\t\t$scope.appThousandSymbol = $module.getSystemThousandsSeparator();\r\n\t}\r\n\treturn $scope.appThousandSymbol;\r\n};\r\n\r\n/** Allows to set the thousands grouping separator used by the application */\r\n$module.setThousandsSeparator = function (value) {\r\n\t$scope.appThousandSymbol = value;\r\n};\r\n\r\n/** Allows to get the decimal symbol used by the application */\r\n$module.getSystemDecimalSymbol = function () {\r\n\tif ($scope.systemDecimalSymbol === null) {\r\n\t\tconst numericFormatter = new Intl.NumberFormat($module.getLanguage(), { useGrouping: true, minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n\t\tvar value = numericFormatter.format('1.99');\r\n\t\t$scope.systemDecimalSymbol = value.substring(1, 2);\r\n\t}\r\n\treturn $scope.systemDecimalSymbol;\r\n};\r\n\r\n/** Allows to get the decimal symbol used by the application */\r\n$module.getDecimalSymbol = function () {\r\n\tif ($scope.appDecimalSymbol === null) {\r\n\t\t$scope.appDecimalSymbol = $module.getSystemDecimalSymbol();\r\n\t}\r\n\treturn $scope.appDecimalSymbol;\r\n};\r\n\r\n/** Allows to set the decimal symbol used by the application */\r\n$module.setDecimalSymbol = function (value) {\r\n\t$scope.appDecimalSymbol = value;\r\n};\r\n\r\n/**\r\n * Allows to obtain the date format defined by the system locale configuration\r\n */\r\n$module.getSystemDateFormat = function() {\r\n\tconst dummyDate = new Date(1980, 10, 20);\r\n\tconst locale = $module.getLocale();\r\n\tvar formattedDate = dummyDate.toLocaleDateString(locale, { year: 'numeric', month: 'numeric', day: 'numeric' });\r\n\tformattedDate = formattedDate.replace('1980', 'yyyy');\r\n\tformattedDate = formattedDate.replace('11', 'mm');\r\n\treturn formattedDate.replace('20', 'dd');\r\n};\r\n\r\n/**\r\n * Allows to obtain the date format defined for the application\r\n */\r\n$module.getDateFormat = function() {\r\n\tif (!$scope.dateFormat) {\r\n\t\t$scope.dateFormat = $module.getSystemDateFormat();\r\n\t}\r\n\treturn $scope.dateFormat;\r\n};\r\n\r\n/**\r\n * Allows to define the date format for the application\r\n * @param {string} format String with the date format to define, using the following elements:\r\n * \t\t\t- yyyy: year\r\n * \t\t\t- mm: month\r\n * \t\t\t- dd: day\r\n */\r\n$module.setDateFormat = function(format) {\r\n\t$scope.dateFormat = format;\r\n};\r\n\r\n/**\r\n * Allows to obtain the date and time format defined by the system locale configuration\r\n */\r\n$module.getDateTimeFormat = function() {\r\n\tif (!$scope.dateTimeFormat) {\r\n\t\tconst dateFormat = $module.getDateFormat();\r\n\t\t$scope.dateTimeFormat = `${dateFormat} hh:MM:ss`;\r\n\t}\r\n\treturn $scope.dateTimeFormat;\r\n};\r\n\r\n/**\r\n * Allows to define the date and time format for the application\r\n * @param {string} format String with the date and time format to define, using the following elements:\r\n * \t\t\t- yyyy: year\r\n * \t\t\t- mm: month\r\n * \t\t\t- dd: day\r\n * \t\t\t- hh: Hour of the day\r\n * \t\t\t- MM: minutes\r\n * \t\t\t- ss: Seconds\r\n */\r\n$module.setDateTimeFormat = function(format) {\r\n\t$scope.dateTimeFormat = format;\r\n};\r\n\r\nexport default $module;\r\n","import i18n from './i18n.mjs';\r\n\r\nconst $scope = {};\r\n// Holds the reference to all the formatters defined by the module\r\n$scope.formatters = {};\r\n// Holds the reference to the system formatter used to handle numbers with grouping and decimals\r\n$scope.moneyFormatter = null;\r\n// Holds the reference to the system formatter used to handle numbers with decimals without grouping\r\n$scope.decimalFormatter = null;\r\n\r\n/**\r\n * Internal utility method to make sure the number is represented by a two digit value\r\n * @param {int} value Value to evaluate and add the trailing zero\r\n * @returns String with the numeric value and a zero trailing whenever it is applicable\r\n */\r\nfunction twoDigitNumber(value) {\r\n\tif (value && value < 10) {\r\n\t\treturn `0${value}`;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Internal method to adjust a formatted string with a numeric representation to use the proper\r\n * symbols according to the application configuration\r\n * @param {string} value String with the numeric representation\r\n */\r\nfunction standardizeNumericSymbols(value) {\r\n\tif (value === null || typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tconst systemThousands = i18n.getSystemThousandsSeparator();\r\n\tconst systemDecimal = i18n.getSystemDecimalSymbol();\r\n\tvar appThousands = i18n.getThousandsSeparator();\r\n\tconst appDecimal = i18n.getDecimalSymbol();\r\n\tif (appThousands === appDecimal) {\r\n\t\tappThousands = '';\r\n\t}\r\n\tif (systemThousands !== appThousands || systemDecimal !== appDecimal) {\r\n\t\tvalue = value.replaceAll(systemThousands, 'T');\r\n\t\tvalue = value.replaceAll(systemDecimal, 'D');\r\n\t\tvalue = value.replaceAll('T', appThousands);\r\n\t\tvalue = value.replaceAll('D', appDecimal);\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Process a string representation of a number to deformat it by removing any symbol that is not\r\n * relevant for its parsing\r\n * @param {string} value String with the numeric representation to evaluate\r\n * @returns String with the numeric representation ready to be parsed\r\n */\r\nfunction prepareNumberForParsing(value) {\r\n\tconst appThousands = i18n.getThousandsSeparator();\r\n\tconst appDecimal = i18n.getDecimalSymbol();\r\n\tif (appThousands !== appDecimal) {\r\n\t\tvalue = value.replaceAll(appThousands, '');\r\n\t\tconst systemDecimal = i18n.getSystemDecimalSymbol();\r\n\t\tvalue = value.replaceAll(appDecimal, systemDecimal);\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Internal utility method that extracts portions of a date contained in a string\r\n * @param {string} value Value with the string representation of the date\r\n * @param {string} dateFormat Format in which the date is represented\r\n * @param {string} part Part that wants to be extracted\r\n * @returns Value for the required part\r\n */\r\nfunction getDatePart(value, dateFormat, part) {\r\n\tvar startIndex = dateFormat.indexOf(part);\r\n\tvar endIndex = startIndex + part.length;\r\n\tvar partValue = value.substring(startIndex, endIndex);\r\n\treturn parseInt(partValue);\r\n}\r\n\r\n/** Class to define the methods to provide a formatting mechanism */\r\nclass Formatter {\r\n\t#name;\r\n\t#formatter;\r\n\t#deformatter;\r\n\r\n\tconstructor(name, formatter, deformatter) {\r\n\t\tthis.#name = name;\r\n\t\tthis.#formatter = formatter;\r\n\t\tthis.#deformatter = deformatter;\r\n\t}\r\n\r\n\tget name() {\r\n\t\treturn this.#name;\r\n\t}\r\n\r\n\t/**\r\n     * Method to transform a raw value into a representation to be shown in the UI\r\n     * @param {any} value Raw value that will be transformed applying the corresponding format\r\n     * @returns Formatted value\r\n     */\r\n\tformat(value) {\r\n\t\treturn this.#formatter(value);\r\n\t}\r\n\r\n\t/**\r\n     * Method to transform a formatted UI value into a raw value that can be used for operations\r\n     * @param {string} value String with the formatted value\r\n     * @returns Raw value transformed to be processed by the system\r\n     */\r\n\tdeformat(value) {\r\n\t\treturn this.#deformatter(value);\r\n\t}\r\n}\r\n\r\n// ----------------\r\n// BOOLEAN\r\n// ----------------\r\n/** Method to format a boolean value to create its UI representation */\r\nfunction booleanFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'boolean') {\r\n\t\treturn `ERROR_NON_BOOLEAN[${value}]`;\r\n\t}\r\n\treturn (value === true) ? 'true' : 'false';\r\n}\r\n\r\n/** Method to parse a formatted value containing a boolean representation coming from the UI */\r\nfunction booleanDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\treturn value === 'true';\r\n}\r\n\r\n$scope.formatters['boolean'] = new Formatter('boolean', booleanFormatter, booleanDeformatter);\r\n\r\n// ----------------\r\n// INTEGER\r\n// ----------------\r\n/** Method to format a numeric integer value to create its UI representation */\r\nfunction integerFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'number') {\r\n\t\treturn `ERROR_NAN[${value}]`;\r\n\t}\r\n\treturn String(value);\r\n}\r\n\r\n/** Method to parse a formatted value containing an integer representation coming from the UI */\r\nfunction integerDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\treturn parseInt(value);\r\n}\r\n\r\n$scope.formatters['integer'] = new Formatter('integer', integerFormatter, integerDeformatter);\r\n\r\n// ----------------\r\n// DECIMAL\r\n// ----------------\r\n/** Method to format a numeric decimal value to create its UI representation */\r\nfunction decimalFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'number') {\r\n\t\treturn `ERROR_NAN[${value}]`;\r\n\t}\r\n\tif ($scope.decimalFormatter === null) {\r\n\t\t$scope.decimalFormatter = Intl.NumberFormat(i18n.getLanguage(), { useGrouping: false, minimumFractionDigits: 2, maximumFractionDigits: 4 });\r\n\t}\r\n\tvar formatted = $scope.decimalFormatter.format(value);\r\n\tformatted = standardizeNumericSymbols(formatted);\r\n\treturn formatted;\r\n}\r\n\r\n/** Method to parse a formatted value containing a decimal representation coming from the UI */\r\nfunction decimalDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tif ($scope.decimalFormatter === null) {\r\n\t\t$scope.decimalFormatter = Intl.NumberFormat(i18n.getLanguage(), { useGrouping: false, minimumFractionDigits: 2, maximumFractionDigits: 4 });\r\n\t}\r\n\tvalue = prepareNumberForParsing(value);\r\n\treturn parseFloat(value);\r\n}\r\n\r\n$scope.formatters['decimal'] = new Formatter('decimal', decimalFormatter, decimalDeformatter);\r\n\r\n// ----------------\r\n// MONEY\r\n// ----------------\r\n/** Method to format a numeric value to create its UI representation as money */\r\nfunction moneyFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'number') {\r\n\t\treturn `ERROR_NAN[${value}]`;\r\n\t}\r\n\tif ($scope.moneyFormatter === null) {\r\n\t\t$scope.moneyFormatter = Intl.NumberFormat(i18n.getLanguage(), { useGrouping: true, minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n\t}\r\n\tvar formatted = $scope.moneyFormatter.format(value);\r\n\tformatted = standardizeNumericSymbols(formatted);\r\n\treturn formatted;\r\n}\r\n\r\n/** Method to parse a formatted value containing an numeric representation coming from the UI with money format */\r\nfunction moneyDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tvalue = prepareNumberForParsing(value);\r\n\treturn parseFloat(value);\r\n}\r\n\r\n$scope.formatters['money'] = new Formatter('money', moneyFormatter, moneyDeformatter);\r\n\r\n// ----------------\r\n// DATE\r\n// ----------------\r\n/** Method to format a date value to create its UI representation with date part */\r\nfunction dateFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined') {\r\n\t\treturn null;\r\n\t}\r\n\tif (value instanceof Date) {\r\n\t\tvar dateFormat = i18n.getDateFormat();\r\n\t\tif (!dateFormat) {\r\n\t\t\treturn value.toLocaleDateString(null, { year: 'numeric', month: 'numeric', day: 'numeric' });\r\n\t\t}\r\n\t\tdateFormat = dateFormat.replace('yyyy', value.getFullYear());\r\n\t\tdateFormat = dateFormat.replace('mm', twoDigitNumber(value.getMonth() + 1));\r\n\t\tdateFormat = dateFormat.replace('dd', twoDigitNumber(value.getDate()));\r\n\t\treturn dateFormat;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/** Method to parse a formatted value containing an date representation coming from the UI */\r\nfunction dateDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tvar dateFormat = i18n.getDateFormat();\r\n\tvar year = getDatePart(value, dateFormat, 'yyyy');\r\n\tvar month = getDatePart(value, dateFormat, 'mm');\r\n\tvar day = getDatePart(value, dateFormat, 'dd');\r\n\tconst dateValue = new Date(year, month - 1, day);\r\n\treturn dateValue;\r\n}\r\n\r\n$scope.formatters['date'] = new Formatter('date', dateFormatter, dateDeformatter);\r\n\r\n// ----------------\r\n// DATE TIME\r\n// ----------------\r\n/** Method to format a date value to create its UI representation with date and time parts */\r\nfunction dateTimeFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined') {\r\n\t\treturn null;\r\n\t}\r\n\tif (value instanceof Date) {\r\n\t\tvar dateFormat = i18n.getDateTimeFormat();\r\n\t\tif (!dateFormat) {\r\n\t\t\treturn value.toLocaleDateString(null, { year: 'numeric', month: 'numeric', day: 'numeric' });\r\n\t\t}\r\n\t\tdateFormat = dateFormat.replace('yyyy', value.getFullYear());\r\n\t\tdateFormat = dateFormat.replace('mm', twoDigitNumber(value.getMonth() + 1));\r\n\t\tdateFormat = dateFormat.replace('dd', twoDigitNumber(value.getDate()));\r\n\t\tdateFormat = dateFormat.replace('hh', twoDigitNumber(value.getHours()));\r\n\t\tdateFormat = dateFormat.replace('MM', twoDigitNumber(value.getMinutes()));\r\n\t\tdateFormat = dateFormat.replace('ss', twoDigitNumber(value.getSeconds()));\r\n\t\treturn dateFormat;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/** Method to parse a formatted value containing an date/time representation coming from the UI */\r\nfunction dateTimeDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tvar dateFormat = i18n.getDateTimeFormat();\r\n\tvar year = getDatePart(value, dateFormat, 'yyyy');\r\n\tvar month = getDatePart(value, dateFormat, 'mm');\r\n\tvar day = getDatePart(value, dateFormat, 'dd');\r\n\tvar hour = getDatePart(value, dateFormat, 'hh');\r\n\tvar minute = getDatePart(value, dateFormat, 'MM');\r\n\tvar second = getDatePart(value, dateFormat, 'ss');\r\n\tconst dateValue = new Date(year, month - 1, day, hour, minute, second);\r\n\treturn dateValue;\r\n}\r\n\r\n$scope.formatters['datetime'] = new Formatter('datetime', dateTimeFormatter, dateTimeDeformatter);\r\n\r\n/**\r\n * Allows to obtain a specific formatter\r\n * @param {string} formatName String with the code of the formatter to obtain. The possible values are:\r\n * \t\t\t- integer: Formatter to create and parse representation of integer values\r\n * \t\t\t- decimal: Formatter to create and parse representation of decimal values\r\n * \t\t\t- money: Formatter to create and parse representation of numeric values adding grouping and two decimals\r\n * \t\t\t- date: Formatter to create and parse representation of date values\r\n * \t\t\t- datetime: Formatter to create and parse representation of date and time values\r\n * @returns\r\n */\r\nconst $module = function(formatName) {\r\n\tif (!formatName) {\r\n\t\treturn null;\r\n\t}\r\n\tif (!$scope.formatters[formatName]) {\r\n\t\tconsole.warn(`erebus.formats.unknown_formatter[${formatName}]`);\r\n\t\treturn null;\r\n\t}\r\n\treturn $scope.formatters[formatName];\r\n};\r\n\r\nexport default $module;\r\n","/** Internal method to clear and stardardize a path */\r\nfunction clearPath(path) {\r\n\tif (path && typeof (path) === 'string') {\r\n\t\tif (path.startsWith('#')) {\r\n\t\t\tpath = path.substring(1);\r\n\t\t}\r\n\t\tif (path.startsWith('/')) {\r\n\t\t\tpath = path.substring(1);\r\n\t\t}\r\n\t}\r\n\treturn path;\r\n}\r\n\r\n/**\r\n * Compares a path against the routing path of a router\r\n * @param {string} routingPath Path of the router\r\n * @param {string} targetPath Path to compare\r\n * @returns Boolean value to determine if the route is equivalent to the path\r\n */\r\nfunction compareStringPaths(routingPath, targetPath) {\r\n\tif (routingPath === '*' || routingPath === targetPath) {\r\n\t\treturn true;\r\n\t}\r\n\tconst routingParts = routingPath.split('/');\r\n\tconst targetParts = targetPath.split('/');\r\n\tfor (var idx = 0; idx < routingParts.length; idx++) {\r\n\t\t// ignore the parameter parts in the routing\r\n\t\tif (routingParts[idx].startsWith(':')) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (routingParts[idx] !== '*' && routingParts[idx] !== targetParts[idx]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Uses the pattern defined by a routing path to extract the parameters from it\r\n * @param {string} routingPath String with the routing path\r\n * @param {string} targetPath String with the path to extract the parameters from it\r\n */\r\nfunction extractPathParameters(routingPath, targetPath) {\r\n\tconst parameters = {};\r\n\tconst routingParts = routingPath.split('/');\r\n\tconst targetParts = targetPath.split('/');\r\n\tfor (var idx = 0; idx < routingParts.length; idx++) {\r\n\t\tif (!routingParts[idx].startsWith(':')) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tconst paramName = routingParts[idx].substring(1);\r\n\t\tparameters[paramName] = targetParts[idx];\r\n\t}\r\n\treturn parameters;\r\n}\r\n\r\n/** Object to represent a single route */\r\nclass Route {\r\n\t/** Path served by this route */\r\n\t#path;\r\n\t/** Handler used to serve the route represented by this instance */\r\n\t#handler;\r\n\r\n\t/**\r\n\t * Creates a new route to serve a specific path\r\n\t * @param {string} path String with the path to serve\r\n\t * @param {function} handler Function to be invoked when this route is served\r\n\t */\r\n\tconstructor(path, handler) {\r\n\t\tthis.#path = clearPath(path);\r\n\t\tthis.#handler = handler;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if the current route instance can match a specific path\r\n\t * @param {string} path Path to evaluate\r\n\t */\r\n\tmatch(path) {\r\n\t\tpath = clearPath(path);\r\n\t\tif (typeof (this.#path) === 'string') {\r\n\t\t\treturn compareStringPaths(this.#path, path);\r\n\t\t} else if (this.#path instanceof RegExp) {\r\n\t\t\treturn this.#path.test(path);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** Handles a request using this route instance */\r\n\thandle(path) {\r\n\t\tif (!this.#handler) {\r\n\t\t\treturn Promise.reject(new Error(`erebus.route.no_handler[${path}]`));\r\n\t\t}\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tpath = clearPath(path);\r\n\t\t\ttry {\r\n\t\t\t\tvar parameters = extractPathParameters(this.#path, path);\r\n\t\t\t\tvar result = this.#handler(parameters);\r\n\t\t\t\tif (result instanceof Promise) {\r\n\t\t\t\t\tresult.then(resolve).catch(reject);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tconsole.error('erebus.route.handler_error', ex);\r\n\t\t\t\treject(ex);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Internal method with the logic to identify the matching router from a list of possible routes\r\n * @param {array} routeList List containing the routes instances to evaluate\r\n * @param {string} path Path to match\r\n * @returns The matching route or null if no matching route is found\r\n */\r\nfunction getMatchingRouter(routeList, path) {\r\n\tfor (var rdx = 0; rdx < routeList.length; rdx++) {\r\n\t\tlet route = routeList[rdx];\r\n\t\tif (route.match(path)) {\r\n\t\t\treturn route;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nclass RouterEngine {\r\n\t/** Hold the list of routes registered */\r\n\t#routes = [];\r\n\t/** Flag to determine if the routing engine has been started */\r\n\t#started = false;\r\n\t/** Reference to the default router registered */\r\n\t#defaultRouter;\r\n\t/** Reference to the error handler */\r\n\t#onError;\r\n\r\n\t/**\r\n\t * Register a router to handle a specific path\r\n\t * @param {string} path Path to handle\r\n\t * @param {function} handler Handler to be triggered when the path is matched\r\n\t * @returns Instance of the routing engine\r\n\t */\r\n\tregister(path, handler) {\r\n\t\tif (!handler || typeof(handler) !== 'function') {\r\n\t\t\tthrow Error(`erebus.router.invalid_handler[${path}]`);\r\n\t\t}\r\n\t\tthis.#routes.push(new Route(path, handler));\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Serves a specific path\r\n\t * @param {string} path Path to serve\r\n\t * @returns Promise to be fullfilled (or rejected) after the route is served\r\n\t */\r\n\tserve(path) {\r\n\t\tif (typeof (path) === 'undefined') {\r\n\t\t\tpath = null;\r\n\t\t}\r\n\t\tpath = clearPath(path);\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tvar effectiveRoute = getMatchingRouter(this.#routes, path);\r\n\t\t\tif (!effectiveRoute) {\r\n\t\t\t\teffectiveRoute = this.#defaultRouter;\r\n\t\t\t}\r\n\t\t\tif (!effectiveRoute) {\r\n\t\t\t\treject('erebus.route.no_matching_route_or_default');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\teffectiveRoute.handle(path).then(function () {\r\n\t\t\t\tresolve(true);\r\n\t\t\t}).catch(reject);\r\n\t\t});\r\n\t}\r\n\r\n\t/** Internal method to trigger the routing process based on the current path */\r\n\t#triggerRouting() {\r\n\t\t// TODO: add beforeRoute event\r\n\t\tthis.serve(window.location.hash).then(() => {\r\n\t\t\t// TODO: add afterRoute event\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error('erebus.router.error', err);\r\n\t\t\tif (this.#onError) {\r\n\t\t\t\tthis.#onError(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/** Initialize the route engine to start serving requests */\r\n\tstart() {\r\n\t\tif (this.#started) {\r\n\t\t\tconsole.warn('erebus.router.already_started');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.#started = true;\r\n\t\twindow.addEventListener('popstate', () => {\r\n\t\t\tthis.#triggerRouting();\r\n\t\t});\r\n\t\tthis.#triggerRouting();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the behavior for the default route (when no other route matches the path)\r\n\t * @param {function} handler Funtion to be invoked when no other route matches the requested path or null to remove the default handler\r\n\t * @returns Instance of the routing engine\r\n\t */\r\n\tdefault(handler) {\r\n\t\tif (!handler) {\r\n\t\t\tthis.#defaultRouter = null;\r\n\t\t\treturn this;\r\n\t\t} else if (typeof(handler) != 'function') {\r\n\t\t\tconsole.error('Unable to register a non-function as a default handler for Erebus router');\r\n\t\t\tthrow new Error('erebus.router.invalid_default_handler');\r\n\t\t}\r\n\t\tthis.#defaultRouter = new Route('*', handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the behavior when a route fails\r\n\t * @param {function} handler Funtion to be invoked when the routing causes an error\r\n\t * @returns Instance of the routing engine\r\n\t */\r\n\terror(handler) {\r\n\t\tif (!handler) {\r\n\t\t\tthis.#onError = null;\r\n\t\t\treturn this;\r\n\t\t} else if (typeof (handler) !== 'function') {\r\n\t\t\tconsole.error('Unable to register a non-function as an error handler for Erebus router');\r\n\t\t\tthrow new Error('erebus.router.invalid_error_handler');\r\n\t\t}\r\n\t\tthis.#onError = handler;\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nconst router = new RouterEngine();\r\nexport default router;","import utils from './utils.mjs';\r\nimport formats from './formats.mjs';\r\n\r\nconst $scope = {};\r\n\r\n// Holds the reference to all the validators defined by the module\r\n$scope.validators = {};\r\n\r\n/** Validator to make sure a non-empty/non-null value was provided */\r\n$scope.validators['required'] = function(value) {\r\n\treturn (value !== null && value !== '' && typeof(value) !== 'undefined');\r\n};\r\n\r\n/**\r\n * Internal utility method to execute a validation logic that is based on a single value parameter\r\n * @param {*} value Value to evaluate\r\n * @param {string} params String with a the single value parameter used as a reference for the validator\r\n * @param {string} valueType String with the type of the expected data type.  It is used to transform the parameter\r\n * @param {Function} evaluator Function with the validation logic\r\n * @returns Boolean value with the validation result\r\n */\r\nfunction processParametrizedValidator(value, params, valueType, evaluator) {\r\n\tif (valueType && utils.trim(valueType) !== '') {\r\n\t\tparams = formats(valueType).deformat(params);\r\n\t} else if (typeof(value) === 'string' && typeof(params) === 'string') {\r\n\t\tvalue = parseInt(value);\r\n\t\tparams = parseInt(params);\r\n\t\tif (isNaN(value) || isNaN(params)) {\r\n\t\t\tconsole.warn('erebus.validator.range.unparseable_string_values', { value: value, range: params });\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn evaluator(value, params);\r\n}\r\n\r\n/** Validator to make sure an integer value is not less than the provided value */\r\n$scope.validators['min'] = function(value, params, valueType) {\r\n\treturn processParametrizedValidator(value, params, valueType, function(value, range) {\r\n\t\treturn value >= range;\r\n\t});\r\n};\r\n\r\n/** Validator to make sure an integer value is not greater than the provided value */\r\n$scope.validators['max'] = function(value, params, valueType) {\r\n\treturn processParametrizedValidator(value, params, valueType, function(value, range) {\r\n\t\treturn value <= range;\r\n\t});\r\n};\r\n\r\nconst $module = {};\r\n\r\n/**\r\n * Parses a validation specification and extract the tag, the parameters and the validator for it\r\n * @param {*} validator String with the validator specification\r\n * @returns Object containing the tag, the parameters and the validator reference or null if there is no validator defined for the tag\r\n */\r\nfunction parseValidator(validation) {\r\n\tif (!validation || typeof(validation) !== 'string') {\r\n\t\treturn null;\r\n\t}\r\n\tvar result = null;\r\n\tconst paramIndex = validation.indexOf('=');\r\n\tif (paramIndex < 0) {\r\n\t\tresult = { tag: { name: utils.trim(validation) } };\r\n\t} else {\r\n\t\tresult = { tag: { name: utils.trim(validation.substring(0, paramIndex)) } };\r\n\t\tresult.tag.params = utils.trim(validation.substring(paramIndex + 1));\r\n\t}\r\n\tresult.validator = $scope.validators[result.tag.name];\r\n\tif (!result.validator) {\r\n\t\treturn null;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Executes a specific validation\r\n * @param {string} validation String containing the validation specification.  The specification is composed by a tag\r\n * \t\tthat identifies the validation to execute and optional parameters to provide context to the validation instruction.\r\n * \t\tThe parameters are applicable depending on the needs of the validation.  The tag and the parameters are separated\r\n * \t\tby an equals symbol (=).\r\n * @param {*} value Value to validate using the validation specification\r\n * @param {string} valueType Optional string to describe the type of value provided.  It allows the method to do a more\r\n * \t\taccurate validations when type definition is relevant.  If no value is provided, then default rules will be applicable\r\n * \t\tin the execution of the validation.  The possible types are the same defined for Erebus formatters.\r\n * @param {*} failCollector Array to collect the details about the possible validation failures or null if there is no\r\n * \t\tneed to collect the failures.\r\n * @returns Boolean value with the result of the validation\r\n */\r\n$module.validate = function(validation, value, valueType, failCollector) {\r\n\tif (!validation) {\r\n\t\treturn true;\r\n\t}\r\n\tconst parsed = parseValidator(validation);\r\n\tif (!parsed) {\r\n\t\tconsole.warn(`erebus.validator.invalid_validation[${validation}]`);\r\n\t\treturn true;\r\n\t}\r\n\tif (!parsed.validator(value, parsed.tag.params, valueType)) {\r\n\t\tif (failCollector && Array.isArray(failCollector)) {\r\n\t\t\tfailCollector.push(parsed.tag);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nexport default $module;\r\n","import format from './formats.mjs';\r\nimport validator from './validator.mjs';\r\nimport utils from './utils.mjs';\r\nimport handler from './handler.mjs';\r\n\r\n/**\r\n * Extracts all the reference to the applicable fields that contains a model attribute\r\n * @param {string} containerId Identifier of the top DOM element from where all the model fields will be extracted\r\n */\r\nfunction getModelFields(containerId) {\r\n\tconst formElement = document.getElementById(containerId);\r\n\tif (!formElement) {\r\n\t\tconsole.warn(`erebus.form.container_not_found[${containerId}]`);\r\n\t\treturn [];\r\n\t}\r\n\treturn formElement.querySelectorAll('[model]');\r\n}\r\n\r\n/**\r\n * Extracts all the reference to the fields that contains a validation attribute\r\n * @param {string} containerId Identifier of the top DOM element from where all the applicable fields will be extracted\r\n */\r\nfunction getValidationFields(containerId) {\r\n\tconst formElement = document.getElementById(containerId);\r\n\tif (!formElement) {\r\n\t\tconsole.warn(`erebus.form.container_not_found[${containerId}]`);\r\n\t\treturn [];\r\n\t}\r\n\treturn formElement.querySelectorAll('[validation]');\r\n}\r\n\r\n/**\r\n * Extracts the applicable formatter according to the field specification\r\n * @param {object} fieldInstance Reference to the field instance to extract the formatter for it\r\n * @returns Formatter instance or null if the field does not have any formatter\r\n */\r\nfunction getFieldFormatter(fieldInstance) {\r\n\tconst formatCode = fieldInstance.getAttribute('format');\r\n\treturn format(formatCode);\r\n}\r\n\r\n/**\r\n * Gets the value from a specific field\r\n * @param {HTMLElement} fieldInstance Reference to the HTMLElement DOM field instance to extract the value from it\r\n * @returns Field value\r\n */\r\nfunction getFieldValue(fieldInstance) {\r\n\tconst tagName = fieldInstance.tagName;\r\n\tif (tagName === 'INPUT') {\r\n\t\tconst inputType = fieldInstance.getAttribute('type');\r\n\t\tif (inputType === 'checkbox' && fieldInstance.value === '@') {\r\n\t\t\t// NOTE: boolean value is not formatted, so it should not pass thru the formatter logic\r\n\t\t\treturn fieldInstance.checked;\r\n\t\t}\r\n\t}\r\n\tconst formatter = getFieldFormatter(fieldInstance);\r\n\tif (formatter) {\r\n\t\treturn formatter.deformat(fieldInstance.value);\r\n\t}\r\n\treturn fieldInstance.value;\r\n}\r\n\r\n/**\r\n * Sets the value on a specific field\r\n * @param {HTMLElement} fieldInstance Reference to the HTMLElement DOM field instance to set the value on it\r\n * @param {any} value Value to be set\r\n */\r\nfunction setFieldValue(fieldInstance, value) {\r\n\tif (typeof (value) === 'undefined' || value === null) {\r\n\t\tvalue = '';\r\n\t}\r\n\tconst tagName = fieldInstance.tagName;\r\n\tif (tagName === 'INPUT') {\r\n\t\tconst inputType = fieldInstance.getAttribute('type');\r\n\t\tif (inputType === 'checkbox') {\r\n\t\t\tif (fieldInstance.value === '@') {\r\n\t\t\t\tfieldInstance.checked = value;\r\n\t\t\t} else {\r\n\t\t\t\tfieldInstance.checked = (fieldInstance.value === value);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t} else if (inputType === 'radio') {\r\n\t\t\tfieldInstance.checked = (fieldInstance.value === value);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tconst formatter = getFieldFormatter(fieldInstance);\r\n\tif (formatter) {\r\n\t\tvalue = formatter.format(value);\r\n\t}\r\n\tfieldInstance.value = value;\r\n}\r\n\r\n/**\r\n * Determines if a specific model field can be considered to collect its value or not\r\n * @param {HTMLElement} fieldInstance Reference to the HTMLElement DOM field instance to evaluate\r\n */\r\nfunction canCollectField(fieldInstance) {\r\n\tconst tagName = fieldInstance.tagName;\r\n\tif (tagName === 'INPUT') {\r\n\t\tconst inputType = fieldInstance.getAttribute('type');\r\n\t\tif (inputType === 'checkbox') {\r\n\t\t\tif (fieldInstance.value === '@') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn fieldInstance.checked;\r\n\t\t} else if (inputType === 'radio' && !fieldInstance.checked) {\r\n\t\t\treturn false;\r\n\t\t} else if (inputType === 'button') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Collects the value of a specific field and fills the corresponding model into a collector instance\r\n * @param {HTMLElement} fieldInstance Reference to the HTMLElement DOM field instance to collect its value\r\n * @param {object} collector Object in which the model properties and values are being collected into\r\n */\r\nfunction collectField(fieldInstance, collector) {\r\n\tif (!canCollectField(fieldInstance)) {\r\n\t\treturn;\r\n\t}\r\n\tvar model = fieldInstance.getAttribute('model');\r\n\tif (!model) {\r\n\t\treturn;\r\n\t}\r\n\tconst value = getFieldValue(fieldInstance);\r\n\tif (typeof (value) === 'undefined' || value === null || value === '') {\r\n\t\treturn;\r\n\t}\r\n\tmodel = model.split('.');\r\n\tfor (var mdx = 0; mdx < model.length; mdx++) {\r\n\t\tvar modelAttribute = model[mdx];\r\n\t\tif (mdx == model.length - 1) {\r\n\t\t\tcollector[modelAttribute] = value;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!collector[modelAttribute]) {\r\n\t\t\tcollector[modelAttribute] = {};\r\n\t\t}\r\n\t\tcollector = collector[modelAttribute];\r\n\t}\r\n}\r\n\r\n/**\r\n * Allows to determine if a specific field instance is available to be validated\r\n * @param {HTMLElement} fieldInstance Reference to the field to evaluate\r\n * @returns Boolean value to determine if can be validated or not\r\n */\r\nfunction canValidateField(fieldInstance) {\r\n\tconst tagName = fieldInstance.tagName;\r\n\treturn tagName === 'INPUT' || tagName === 'SELECT';\r\n}\r\n\r\n/**\r\n * Extracts an array with the validations or null if the field does not have applicable validations\r\n * @param {HTMLElement} fieldInstance Reference to the field to extract the validations from it\r\n * @returns Array with the validations or null if there are not applicable validations\r\n */\r\nfunction getEffectiveFieldValidations(fieldInstance) {\r\n\tif (!canValidateField(fieldInstance)) {\r\n\t\treturn null;\r\n\t}\r\n\tvar fieldValidations = fieldInstance.getAttribute('validation');\r\n\tif (fieldValidations === '') {\r\n\t\treturn null;\r\n\t}\r\n\treturn fieldValidations.split(';');\r\n}\r\n\r\n/**\r\n * Collects the result from a field and execute any post-process required to include the\r\n * result into the generic fail collector.\r\n * @param {*} fieldInstance Instance of the field for which the result was produced\r\n * @param {*} fieldFailCollector Collector with the failures received from the field validation\r\n * @param {*} failCollector General collector\r\n */\r\nfunction processFieldResult(fieldInstance, fieldFailCollector, failCollector) {\r\n\tif (fieldFailCollector.length > 0 && failCollector && Array.isArray(failCollector)) {\r\n\t\tfailCollector.push({ field: fieldInstance, failure: fieldFailCollector });\r\n\t}\r\n}\r\n\r\n/**\r\n * Implements the validation of a specific form field\r\n * @param {HTMLElement} fieldInstance Reference to the field to be validated\r\n * @param {Array} failCollector Optional array to collect the detail of the failures or null to avoid collecting it\r\n * @param {Funcion} onFieldValidation Function to be invoked with the result of the validation\r\n * @returns Boolean value to determine if the field passed the validations (true) or not (false)\r\n */\r\nfunction validateField(fieldInstance, failCollector, onFieldValidation) {\r\n\tconst fieldValidations = getEffectiveFieldValidations(fieldInstance);\r\n\tif (!fieldValidations) {\r\n\t\treturn true;\r\n\t}\r\n\tvar result = true;\r\n\tconst fieldValue = getFieldValue(fieldInstance);\r\n\tconst fieldFormat = fieldInstance.getAttribute('format');\r\n\tconst fieldFailCollector = [];\r\n\tfor (var vdx=0; vdx < fieldValidations.length; vdx++) {\r\n\t\tconst validation = utils.trim(fieldValidations[vdx]);\r\n\t\tif (validation === '') {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tresult = validator.validate(validation, fieldValue, fieldFormat, fieldFailCollector) && result;\r\n\t}\r\n\thandler.trigger(onFieldValidation, fieldInstance, result, fieldFailCollector);\r\n\tprocessFieldResult(fieldInstance, fieldFailCollector, failCollector);\r\n\treturn result;\r\n}\r\n\r\n/** Object wrapping the logic to interact with a conceptual form and its fields */\r\nclass FormWrapper {\r\n\t/** String with the identifier of the top HTMLElement containing the form fields */\r\n\t#containerId;\r\n\r\n\t/**\r\n     * Creates the representation of a wrapping object using an identifier to contextualize the field extraction\r\n     * @param {*} containerId String with the identifier of the top HTMLElement containing the form fields\r\n     */\r\n\tconstructor(containerId) {\r\n\t\tthis.#containerId = containerId;\r\n\t}\r\n\r\n\t/** Cleans all the model fields inside the HTMLElement container */\r\n\tclean() {\r\n\t\tconst modelFields = getModelFields(this.#containerId);\r\n\t\tfor (var fdx = 0; fdx < modelFields.length; fdx++) {\r\n\t\t\tsetFieldValue(modelFields[fdx]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n     * Extracts all fields inside the HTMLElement container and collects its values into an object.\r\n     * Each field to be collected should contain a model attribute with the name of the property that will hold the field value.\r\n     * @returns Object containing the field values\r\n     */\r\n\tcollect() {\r\n\t\tconst output = {};\r\n\t\tconst modelFields = getModelFields(this.#containerId);\r\n\t\tfor (var fdx = 0; fdx < modelFields.length; fdx++) {\r\n\t\t\tcollectField(modelFields[fdx], output);\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\r\n\tfill(values) {\r\n\t\tif (!values) {\r\n\t\t\tthis.clean();\r\n\t\t}\r\n\t\tconst modelFields = getModelFields(this.#containerId);\r\n\t\tfor (var fdx = 0; fdx < modelFields.length; fdx++) {\r\n\t\t\tconst fieldInstance = modelFields[fdx];\r\n\t\t\tvar model = fieldInstance.getAttribute('model');\r\n\t\t\tif (!model) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tvar fieldValue = values;\r\n\t\t\tmodel = model.split('.');\r\n\t\t\tfor (var mdx = 0; mdx < model.length; mdx++) {\r\n\t\t\t\tvar modelAttribute = model[mdx];\r\n\t\t\t\tif (fieldValue) {\r\n\t\t\t\t\tfieldValue = fieldValue[modelAttribute];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetFieldValue(fieldInstance, fieldValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the fields in the form container with applicable validations\r\n\t * @param {*} failCollector Optional array to collect the details of the validation failures or null if does not want to be collected\r\n\t * @param {*} onFieldValidation Optional function to receive the result of each field validation\r\n\t * @returns\r\n\t */\r\n\tvalidate(failCollector, onFieldValidation) {\r\n\t\tvar result = true;\r\n\t\tconst fieldList = getValidationFields(this.#containerId);\r\n\t\tfor (var fdx = 0; fdx < fieldList.length; fdx++) {\r\n\t\t\tresult = validateField(fieldList[fdx], failCollector, onFieldValidation) && result;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\nconst $module = function (formId) {\r\n\treturn new FormWrapper(formId);\r\n};\r\n\r\nexport default $module;\r\n","'use strict';\r\nconsole.log('Erebus Core v0.0.17');\r\n\r\nimport utils from './utils.mjs';\r\nimport cookies from './cookies.mjs';\r\nimport random from './random.mjs';\r\nimport events from './events.mjs';\r\nimport handler from './handler.mjs';\r\nimport element from './element.mjs';\r\nimport http from './http.mjs';\r\nimport i18n from './i18n.mjs';\r\nimport formats from './formats.mjs';\r\nimport router from './router.mjs';\r\nimport form from './form.mjs';\r\n\r\nexport default { utils, cookies, random, events, handler, element, http, i18n, formats, router, form };\r\n","import erebus from 'erebus-core';\r\nimport './protect.css';\r\n\r\nconst $scope = {};\r\n// Allows to determine if the protect layer is visible or not\r\n$scope.visible = false;\r\n\r\nconst $module = {};\r\n\r\n/** Displays the protect layer */\r\n$module.show = async function() {\r\n\tif ($scope.visible) {\r\n\t\treturn;\r\n\t}\r\n\tvar protectElement = document.getElementById('divErebusProtect');\r\n\tif (!protectElement) {\r\n\t\tprotectElement = document.createElement('div');\r\n\t\tprotectElement.setAttribute('id', 'divErebusProtect');\r\n\t\tprotectElement.setAttribute('class', 'erb-protect');\r\n\t\tawait erebus.events.documentReady();\r\n\t\tdocument.body.appendChild(protectElement);\r\n\t} else if (!$scope.visible) {\r\n\t\tprotectElement.classList.remove('erb-hidden');\r\n\t}\r\n\t$scope.visible = true;\r\n};\r\n\r\n/** Hides the protect layer */\r\n$module.hide = async function() {\r\n\tif (!$scope.visible) {\r\n\t\treturn;\r\n\t}\r\n\tvar protectElement = document.getElementById('divErebusProtect');\r\n\tif (protectElement) {\r\n\t\tprotectElement.classList.add('erb-hidden');\r\n\t}\r\n\t$scope.visible = false;\r\n};\r\n\r\nexport default $module;","import erebus from 'erebus-core';\r\nimport protect from './protect.mjs';\r\nimport './dialog.css';\r\n\r\n/** Constant with the identifier for the DOM element containing the dialog */\r\nconst DIALOG_CONTAINER_ID = 'divErebusDialog';\r\n\r\nconst $scope = {};\r\n// contains the list of dialogs to be open\r\n$scope.queue = [];\r\n// contains the reference to the current dialog (if there is any dialog open)\r\n$scope.current = null;\r\n\r\n/** Extract the default title for a specific dialog type */\r\nfunction getDefaultTitle(type) {\r\n\treturn erebus.i18n.getLabel(`dialog.title.${type}`, type);\r\n}\r\n\r\n/** Collects and opens the next dialog in the queue */\r\nfunction nextDialog() {\r\n\tconst dialog = $scope.queue.shift();\r\n\tif (dialog) {\r\n\t\tdialog.open();\r\n\t} else {\r\n\t\t$scope.current = null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Internal utility method to obtain the reference to the DOM element that represents the dialog top container or \r\n * creates it in case it does not exist.\r\n * @param {string} dialogType String with the dialog type\r\n * @returns Reference to the dialog container\r\n */\r\nfunction getOrCreateDialogContainer(dialogType) {\r\n\tvar container = document.getElementById(DIALOG_CONTAINER_ID);\r\n\tif (!container) {\r\n\t\tcontainer = document.createElement('div');\r\n\t\tcontainer.setAttribute('id', DIALOG_CONTAINER_ID);\r\n\t} else {\r\n\t\tcontainer.parentElement.removeChild(container);\r\n\t\tcontainer.innerHTML = '';\r\n\t}\r\n\tcontainer.setAttribute('class', 'erb-dialog erb-' + dialogType);\r\n\treturn container;\r\n}\r\n\r\n/**\r\n * Creates the DOM element that renders an X close button inside the dialog\r\n * @param {HTMLElement} container Reference to the DOM element that represents the dialog top container\r\n * @returns Reference to the element added to the dialog\r\n */\r\nfunction createTopCloseButton(container) {\r\n\tconst topClosebutton = document.createElement('div');\r\n\ttopClosebutton.setAttribute('class', 'erb-close');\r\n\tcontainer.appendChild(topClosebutton);\r\n\treturn topClosebutton;\r\n}\r\n\r\n/**\r\n * Creates the DOM element that renders the dialog title\r\n * @param {HTMLElement} container Reference to the DOM element that represents the dialog top container\r\n * @param {string} title String with the dialog title (text or HTML)\r\n */\r\nfunction createDialogTitle(container, title) {\r\n\tconst titleArea = document.createElement('div');\r\n\ttitleArea.setAttribute('class', 'erb-header');\r\n\ttitleArea.innerHTML = title;\r\n\tcontainer.appendChild(titleArea);\r\n}\r\n\r\n/**\r\n * Creates the DOM element that renders the dialog body\r\n * @param {HTMLElement} container Reference to the DOM element that represents the dialog top container\r\n * @param {string} title String with the dialog content (text or HTML)\r\n */\r\nfunction createDialogBody(container, message) {\r\n\tconst bodyArea = document.createElement('div');\r\n\tbodyArea.setAttribute('class', 'erb-body');\r\n\tbodyArea.innerHTML = message;\r\n\tcontainer.appendChild(bodyArea);\r\n}\r\n\r\n/**\r\n * Internal utility method to create a dialog button\r\n * @param {HTMLElement} buttonContainer Reference to the DOM element to append the button into it\r\n * @param {string} buttonText String with the button text\r\n * @param {string} buttonClass String with the button CSS class used as modifier\r\n * @param {Function} listener Reference to a function to be invoked when the button is clicked\r\n */\r\nfunction createDialogButton(buttonContainer, buttonText, buttonClass, listener) {\r\n\tconst closeButton = document.createElement('button');\r\n\tcloseButton.setAttribute('class', buttonClass);\r\n\tcloseButton.innerHTML = buttonText;\r\n\tcloseButton.addEventListener('click', listener);\r\n\tbuttonContainer.appendChild(closeButton); \r\n}\r\n\r\n/**\r\n * Cerates the DOM element that renders the dialog footer\r\n * @param {HTMLElement} container Reference to the DOM element that represents the dialog top container\r\n */\r\nfunction createDialogFooter(container, dialogType, dialogReference) {\r\n\tconst footerArea = document.createElement('div');\r\n\tfooterArea.setAttribute('class', 'erb-footer');\r\n\tif (dialogType === $module.TYPE.confirm) {\r\n\t\tconst yesLabel = erebus.i18n.getLabel('button.yes', 'Yes');\r\n\t\tcreateDialogButton(footerArea, yesLabel, 'erb-button erb-positive', function() {\r\n\t\t\tdialogReference.close(true);\r\n\t\t});\r\n\t\tconst noLabel = erebus.i18n.getLabel('button.no', 'No');\r\n\t\tcreateDialogButton(footerArea, noLabel, 'erb-button erb-negative', function() {\r\n\t\t\tdialogReference.close(false);\r\n\t\t});\r\n\t} else {\r\n\t\tconst closeLabel = erebus.i18n.getLabel('button.close', 'Close');\r\n\t\tcreateDialogButton(footerArea, closeLabel, 'erb-button', function() {\r\n\t\t\tdialogReference.close();\r\n\t\t});\r\n\t}\r\n\tcontainer.appendChild(footerArea);\r\n}\r\n\r\n/** Class representing a dialog instance providing methods to interact with the dialog DOM representation */\r\nclass ErebusDialog {\r\n\t// String with the type of dialog\r\n\t#type;\r\n\t// String with the dialog message\r\n\t#message;\r\n\t// String with the dialog title or null to use the default title depending on the dialog type\r\n\t#title;\r\n\t// Reference to a function used as a handler to be invoked when the dialog is closed\r\n\t#onClose;\r\n\t\r\n\tconstructor(dialogType, message, title, onClose) {\r\n\t\tif (!title) {\r\n\t\t\ttitle = getDefaultTitle(dialogType);\r\n\t\t}\r\n\t\tthis.#type = dialogType;\r\n\t\tthis.#message = message;\r\n\t\tthis.#title = title;\r\n\t\tthis.#onClose = onClose;\r\n\t}\r\n\r\n\t/**\r\n\t * Opens the dialog instance\r\n\t */\r\n\tasync open() {\r\n\t\t$scope.current = this;\r\n\t\tprotect.show();\r\n\t\tconst container = getOrCreateDialogContainer(this.#type);\r\n\t\tif (this.#type !== $module.TYPE.confirm) {\r\n\t\t\tconst topCloseButton = createTopCloseButton(container);\r\n\t\t\ttopCloseButton.addEventListener('click', () => {\r\n\t\t\t\tthis.close();\r\n\t\t\t});\r\n\t\t}\r\n\t\tcreateDialogTitle(container, this.#title);\r\n\t\tcreateDialogBody(container, this.#message);\r\n\t\tcreateDialogFooter(container, this.#type, this);\r\n\t\tawait erebus.events.documentReady();\r\n\t\tdocument.body.appendChild(container);\r\n\t}\r\n\r\n\t/**\r\n\t * Closes the dialog instance\r\n\t * @param {*} value Optional value pass to the promise fullfilled when the dialog was opened\r\n\t */\r\n\tasync close(value) {\r\n\t\tvar container = document.getElementById(DIALOG_CONTAINER_ID);\r\n\t\tcontainer.classList.add('erb-hidden');\r\n\t\tcontainer.innerHTML = '';\r\n\t\t$scope.current = null;\r\n\t\tprotect.hide();\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.#onClose(value);\r\n\t\t\tnextDialog();\r\n\t\t}, 0);\r\n\t}\r\n}\r\n\r\n/**\r\n * Generic method to create a dialog with a dynamic type. Should receive: \r\n * @param {string} dialogType String with the type of dialog to create (info, success, warn, error, confirm).\r\n * \t\tThe following constants can be used: \r\n * \t\t\t- Erebus.dialog.TYPE.info.\r\n * \t\t\t- Erebus.dialog.TYPE.success.\r\n * \t\t\t- Erebus.dialog.TYPE.warn.\r\n * \t\t\t- Erebus.dialog.TYPE.error.\r\n * \t\t\t- Erebus.dialog.TYPE.confirm.\r\n * @param {string} message String with the message or HTML content to show in the dialog body\r\n * @param {string} title Optional string with the title of the dialog or omit to use the default title\r\n * @returns Promise to be fulfilled when the dialog has been dismiss by the user\r\n */\r\nconst $module = function (dialogType, message, title) {\r\n\treturn new Promise(function(resolve) {\r\n\t\tconst dialog = new ErebusDialog(dialogType, message, title, resolve);\r\n\t\tif ($scope.current) {\r\n\t\t\t$scope.queue.push(dialog);\r\n\t\t} else {\r\n\t\t\tdialog.open();\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/** Contains constants for all the dialog types */\r\n$module.TYPE = { info: 'info', success: 'success', warn: 'warn', error: 'error', confirm: 'confirm' };\r\n\r\n/**\r\n * Creates an informational dialog.\r\n * @param {string} message String with the message or HTML content to show in the dialog body\r\n * @param {string} title Optional string with the title of the dialog or omit to use the default title\r\n * @returns Promise to be fulfilled when the dialog has been dismiss by the user\r\n */\r\n$module.info = function (message, title) {\r\n\treturn $module($module.TYPE.info, message, title);\r\n};\r\n\r\n/**\r\n * Creates a success dialog.\r\n * @param {string} message String with the message or HTML content to show in the dialog body\r\n * @param {string} title Optional string with the title of the dialog or omit to use the default title\r\n * @returns Promise to be fulfilled when the dialog has been dismiss by the user\r\n */\r\n$module.success = function (message, title) {\r\n\treturn $module($module.TYPE.success, message, title);\r\n};\r\n\r\n/**\r\n * Creates a warning dialog.\r\n * @param {string} message String with the message or HTML content to show in the dialog body\r\n * @param {string} title Optional string with the title of the dialog or omit to use the default title\r\n * @returns Promise to be fulfilled when the dialog has been dismiss by the user\r\n */\r\n$module.warn = function (message, title) {\r\n\treturn $module($module.TYPE.warn, message, title);\r\n};\r\n\r\n/**\r\n * Creates an error dialog.\r\n * @param {string} message String with the message or HTML content to show in the dialog body\r\n * @param {string} title Optional string with the title of the dialog or omit to use the default title\r\n * @returns Promise to be fulfilled when the dialog has been dismiss by the user\r\n */\r\n$module.error = function (message, title) {\r\n\treturn $module($module.TYPE.error, message, title);\r\n};\r\n\r\n/**\r\n * Creates a confirm dialog.\r\n * @param {string} message String with the message or HTML content to show in the dialog body\r\n * @param {string} title Optional string with the title of the dialog or omit to use the default title\r\n * @returns Promise to be fulfilled with the selection of the user\r\n */\r\n$module.confirm = function (message, title) {\r\n\treturn $module($module.TYPE.confirm, message, title);\r\n};\r\n\r\nexport default $module;\r\n","import erebus from 'erebus-core';\r\nimport './toast.css';\r\n\r\n/** Constant with the identifier used for the DOM element containing all the toasts */\r\nconst TOAST_CONTAINER_ID = 'divErebusToastContainer';\r\n/** Constant with the prefix used to generate the toast identifiers */\r\nconst TOAST_ID_PREFIX = 'erbToast_';\r\n/** Constant with the default time (in milis) used to dismiss the toasts automatically */\r\nconst DEFAULT_TIMEOUT = 8000;\r\n/** Hold a reference to every toast element that is opened */\r\nconst openToasts = {};\r\n/** Reference to the event triggered when the toast is closed */\r\nconst closeEvent = new CustomEvent('toast-close');\r\n\r\n/** Extract the default title for a specific toast type */\r\nfunction getDefaultTitle(type) {\r\n\treturn erebus.i18n.getLabel(`toast.title.${type}`, type);\r\n}\r\n\r\n/** Obtains (or creates if does not exist) the main container used to position all the toasts */\r\nasync function getOrCreateToastContainer() {\r\n\tawait erebus.events.documentReady();\r\n\tvar container = document.getElementById(TOAST_CONTAINER_ID);\r\n\tif (!container) {\r\n\t\tcontainer = document.createElement('div');\r\n\t\tcontainer.setAttribute('id', TOAST_CONTAINER_ID);\r\n\t\tcontainer.setAttribute('class', 'erb-toast-container');\r\n\t\tdocument.body.appendChild(container);\r\n\t}\r\n\treturn container;\r\n}\r\n\r\nfunction createToastTitle(container, toastType, title) {\r\n\tconst titleElement = document.createElement('div');\r\n\ttitleElement.setAttribute('class', 'erb-header');\r\n\tif (!title) {\r\n\t\ttitle = getDefaultTitle(toastType);\r\n\t}\r\n\ttitleElement.innerHTML = title;\r\n\tcontainer.appendChild(titleElement);\r\n}\r\n\r\nfunction createToastBody(container, message) {\r\n\tconst bodyElement = document.createElement('div');\r\n\tbodyElement.setAttribute('class', 'erb-body');\r\n\tbodyElement.innerHTML = message;\r\n\tcontainer.appendChild(bodyElement);\r\n}\r\n\r\nfunction createToastBox(toastId, toastType, message, title) {\r\n\tconst toastBox = document.createElement('div');\r\n\ttoastBox.setAttribute('id', TOAST_ID_PREFIX + toastId);\r\n\ttoastBox.setAttribute('class', 'erb-toast erb-' + toastType);\r\n\tcreateToastTitle(toastBox, toastType, title);\r\n\tconsole.log('message=', message);\r\n\tcreateToastBody(toastBox, message);\r\n\treturn toastBox;\r\n}\r\n\r\nclass ErebusToast {\r\n\t#id;\r\n\t#type;\r\n\t#message;\r\n\t#title;\r\n\t#status;\r\n\r\n\tconstructor(toastType, message, title) {\r\n\t\tthis.#id = erebus.random.shortId();\r\n\t\tthis.#type = toastType;\r\n\t\tthis.#message = message;\r\n\t\tthis.#title = title;\r\n\t\t// Allows to determine the toast status (-1=Never opened, 1=Opened, 0=Closed)\r\n\t\tthis.#status = -1;\r\n\t}\r\n\r\n\tasync open() {\r\n\t\tif (this.#status == 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.#status = 1;\r\n\t\tconst toastBox = createToastBox(this.#id, this.#type, this.#message, this.#title);\r\n\t\ttoastBox.addEventListener('click', () => {\r\n\t\t\tthis.close();\r\n\t\t});\r\n\t\tconst container = await getOrCreateToastContainer();\r\n\t\tcontainer.appendChild(toastBox);\r\n\t\tawait erebus.events.animate(toastBox, 'erb-open');\r\n\t\topenToasts[this.#id] = this;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tautoClose(timing) {\r\n\t\tif (!timing || typeof(timing) !== 'number') {\r\n\t\t\ttiming = DEFAULT_TIMEOUT;\r\n\t\t}\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.close();\r\n\t\t}, timing);\r\n\t}\r\n\r\n\tclose() {\r\n\t\tif (this.#status !== 1) {\r\n\t\t\tconsole.warn('erebus.components.toast.already_closed');\r\n\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\t\tthis.#status = 0;\r\n\t\tdelete openToasts[this.#id];\r\n\t\tconst toastBox = document.getElementById(TOAST_ID_PREFIX + this.#id);\r\n\t\tif (!toastBox) {\r\n\t\t\tconsole.warn('erebus.components.toast.toast_element_not_found');\r\n\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\terebus.events.animate(toastBox, 'erb-closed').then(() => {\r\n\t\t\t\ttoastBox.classList.remove('erb-open');\r\n\t\t\t\ttoastBox.parentElement.removeChild(toastBox);\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\ttoastBox.dispatchEvent(closeEvent);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n     * Adds an event listener triggered after the toast has been closed\r\n     * @param {function} handler Function to be triggered after the toast has been closed\r\n     * @param {object} params Parameters to define the listener behavior. To set the listener to be triggered only once use { once: true }.\r\n     */\r\n\tonClose(handler, params) {\r\n\t\tif(typeof(handler) !== 'function') {\r\n\t\t\tthrow Error('erebus.components.toast.on_close.invalid_handler');\r\n\t\t}\r\n\t\tconst toastBox = document.getElementById(TOAST_ID_PREFIX + this.#id);\r\n\t\ttoastBox.addEventListener('toast-close', handler, params);\r\n\t}\r\n}\r\n\r\nconst $module = async function(toastType, message, title) {\r\n\tconst toast = new ErebusToast(toastType, message, title);\r\n\treturn toast.open();\r\n};\r\n\r\n/** Contains constants for all the module types */\r\n$module.TYPE = { info: 'info', success: 'success', warn: 'warn', error: 'error' };\r\n\r\n/**\r\n * Create an error toast with specific content on it\r\n * @param {string} content HTML content to put in the toast\r\n */\r\n$module.error = function(messsage, title) {\r\n\treturn $module($module.TYPE.error, messsage, title);\r\n};\r\n\r\n/**\r\n * Create a warning toast with specific content on it\r\n * @param {string} content HTML content to put in the toast\r\n */\r\n$module.warn = function(messsage, title) {\r\n\treturn $module($module.TYPE.warn, messsage, title);\r\n};\r\n\r\n/**\r\n * Create a success toast with specific content on it\r\n * @param {string} content HTML content to put in the toast\r\n */\r\n$module.success = function(messsage, title) {\r\n\treturn $module($module.TYPE.success, messsage, title);\r\n};\r\n\r\n/**\r\n * Create an info toast with specific content on it\r\n * @param {string} content HTML content to put in the toast\r\n */\r\n$module.info = function(messsage, title) {\r\n\treturn $module($module.TYPE.info, messsage, title);\r\n};\r\n\r\n/**\r\n * Closes all the open toasts\r\n */\r\n$module.closeAll = async function() {\r\n\tfor(var toastId in openToasts) {\r\n\t\tconst toast = openToasts[toastId];\r\n\t\tif (toast) {\r\n\t\t\tawait toast.close();\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default $module;\r\n","'use strict';\r\nimport erebus from 'erebus-core';\r\nimport dialog from './components/dialog.mjs';\r\nimport toast from './components/toast.mjs';\r\nimport './erebus-components.css';\r\nimport './badge.css';\r\nconsole.log('Erebus Components v0.0.7');\r\n\r\nconst langCode = erebus.i18n.getLanguage();\r\nimport resources from '../resources/en.mjs';\r\nerebus.i18n.setResourceBundle(resources, langCode);\r\n\r\n// declares the erebus components once the document is ready\r\nerebus.components = {};\r\nerebus.dialog = dialog;\r\nerebus.toast = toast;\r\n\r\n/**\r\n * Allows to sync the moment when the components module has been initialized and is ready\r\n * @returns Promise to be fullfilled once the components engine is ready\r\n */\r\nerebus.components.onReady = async function () {\r\n\tawait erebus.onDocumentReady();\r\n};\r\n\r\nexport default erebus;\r\n","export default {\r\n\t\"erebus\": \"Erebus framework\",\r\n\t\"dialog.title.success\": \"Success\",\r\n\t\"dialog.title.info\": \"Information\",\r\n\t\"dialog.title.warn\": \"Attention\",\r\n\t\"dialog.title.error\": \"Error\",\r\n\t\"dialog.title.confirm\": \"Confirmation\",\r\n\t\"toast.title.success\": \"Success\",\r\n\t\"toast.title.info\": \"Information\",\r\n\t\"toast.title.warn\": \"Attention\",\r\n\t\"toast.title.error\": \"Error\",\r\n\t\"button.close\": \"Close\",\r\n\t\"button.yes\": \"Yes\",\r\n\t\"button.no\": \"No\"\r\n};\r\n"],"names":["$module","value","Promise","then","replace","tinyId","Math","random","toString","substring","$module$a","set","name","timespan","Error","expireDate","Date","setTime","getTime","cookie","utils","trim","toGMTString","document","get","cookiestring","RegExp","exec","decodeURIComponent","shortId","guid","$module$9","readyState","resolve","addEventListener","attachEvent","console","error","reject","target","animationClass","capture","once","className","classList","add","addClass","$module$8","fnc","params","call","ex","$scope","executeRequest","method","url","options","request","window","XMLHttpRequest","ActiveXObject","createXmlHttp","onreadystatechange","status","err","response","responseText","headers","rawHeaders","getAllResponseHeaders","split","idx","length","parts","headerName","toLowerCase","headerValue","getResponseHeaders","parser","parsers","getResponseParser","result","interceptor","undefined","open","async","setRequestHeader","setRequestHeaders","data","send","$scope$6","JSON","parse","cause","post","put","delete","loadScript","element","createElement","src","type","onerror","onload","head","appendChild","xmlToHtml","xmlElement","htmlElement","tagName","ndx","attributes","xmlAttribute","setAttribute","childNodes","childXml","nodeType","childText","createTextNode","textContent","warn","childHtml","parseHTML","content","domParser","DOMParser","holder","innerHTML","results","parseFromString","push","createErrorContent","errorCode","errorInstance","errorId","errorElement","createErebusElement","source","ErebusElement","body","HTMLElement","nativeSource","startsWith","endsWith","getElementById","querySelector","wrappedElement","hidden","constructor","this","clear","firstChild","removeChild","removeAllChild","innerScripts","querySelectorAll","scriptObj","parentNode","newScript","setParentNode","parent","parsedContent","eventName","listener","isHidden","hide","computedDisplay","getComputedStyle","getPropertyValue","originalDisplay","style","display","show","clone","clonedWrapped","sourceElement","clonedElement","cloneNode","removeAttribute","cloneHTMLElement","classes","cdx","test","removeClass","remove","regex","http","errorBlock","$module$6","getLocale","navigator","language","browserLanguage","getSystemLanguage","substr","setLanguage","getLanguage","setResourceBundle","resource","langCode","handler","trigger","isPromise","catch","resources","Object","assign","getLabel","key","defaultValue","getSystemThousandsSeparator","systemThousandSymbol","Intl","NumberFormat","useGrouping","minimumFractionDigits","maximumFractionDigits","format","getThousandsSeparator","appThousandSymbol","setThousandsSeparator","getSystemDecimalSymbol","systemDecimalSymbol","getDecimalSymbol","appDecimalSymbol","setDecimalSymbol","getSystemDateFormat","dummyDate","locale","formattedDate","toLocaleDateString","year","month","day","getDateFormat","dateFormat","setDateFormat","getDateTimeFormat","dateTimeFormat","setDateTimeFormat","twoDigitNumber","standardizeNumericSymbols","systemThousands","i18n","systemDecimal","appThousands","appDecimal","replaceAll","prepareNumberForParsing","getDatePart","part","startIndex","indexOf","endIndex","partValue","parseInt","formatters","moneyFormatter","decimalFormatter","Formatter","formatter","deformatter","deformat","String","formatted","parseFloat","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","hour","minute","second","formatName","clearPath","path","Route","match","routingPath","targetPath","routingParts","targetParts","compareStringPaths","handle","parameters","extractPathParameters","router","routes","started","defaultRouter","onError","register","serve","effectiveRoute","routeList","rdx","route","getMatchingRouter","triggerRouting","location","hash","start","default","processParametrizedValidator","valueType","evaluator","formats","isNaN","range","validators","$scope$2","getModelFields","containerId","formElement","getFieldFormatter","fieldInstance","formatCode","getAttribute","getFieldValue","checked","setFieldValue","inputType","collectField","collector","canCollectField","model","mdx","modelAttribute","validateField","failCollector","onFieldValidation","fieldValidations","canValidateField","getEffectiveFieldValidations","fieldValue","fieldFormat","fieldFailCollector","vdx","validation","validator","validate","Array","isArray","field","failure","processFieldResult","$module$4","parsed","paramIndex","tag","parseValidator","FormWrapper","clean","modelFields","fdx","collect","output","fill","values","fieldList","getValidationFields","log","erebus","cookies","events","form","formId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","protectElement","wrap","_context","prev","next","visible","abrupt","documentReady","stop","_callee2","_context2","DIALOG_CONTAINER_ID","getOrCreateDialogContainer","dialogType","container","parentElement","createTopCloseButton","topClosebutton","createDialogTitle","title","titleArea","createDialogBody","message","bodyArea","createDialogButton","buttonContainer","buttonText","buttonClass","closeButton","createDialogFooter","dialogReference","footerArea","TYPE","confirm","close","queue","current","_type","WeakMap","_message","_title","_onClose","ErebusDialog","onClose","_classCallCheck","_classPrivateFieldInitSpec","writable","concat","_classPrivateFieldSet","_close","_open","_createClass","_this","protect","_classPrivateFieldGet","apply","arguments","_this2","setTimeout","dialog","shift","_x","$module$1","info","success","TOAST_CONTAINER_ID","TOAST_ID_PREFIX","openToasts","closeEvent","CustomEvent","getOrCreateToastContainer","_getOrCreateToastContainer","_callee4","_context4","createToastTitle","toastType","titleElement","createToastBox","toastId","toastBox","bodyElement","createToastBody","_id","_status","ErebusToast","sent","animate","timing","dispatchEvent","_ref","toast","_x2","_x3","messsage","closeAll","_callee3","_context3","t0","keys","t1","done","components","onReady","onDocumentReady"],"mappings":"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"}